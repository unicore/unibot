const { Markup } = require('telegraf');
const axios = require('axios');
const { ChainsSingleton, generateAccount: generateUniAccount } = require('unicore');
const EosApi = require('eosjs-api');

const { restoreAccount } = require('./restore');
const {
  mainButtons, backToMainMenu, demoButtons,
} = require('./utils/bot');

const {
  getHelixParams,
  getUserHelixBalances,
  printHelixWallet,
  transferAction,
  getLiquidBalance,
  getOneUserHelixBalance,
  printWallet,
  printUserBalances,
  withdrawAction,
  printHelixs,
  priorityAction,
  massWithdrawAction,
  printTail,
  getCurrentUserDeposit,
  getCondition,
  exitFromTail,
  cantBuyTicket,
  depositAction,
  retireAction
} = require('./core');

const { sendMessageToUser, sendMessageToAll } = require('./messages');
const {
  printPartners,
  prepareSpreadAction,
  addPromoBudgetAction,
  getPromoBudget,
  hasRequest,
  requestPromoBudgetAction,
  getPartner,
  continueDemo,
} = require('./partners');

const {
  delOrder,
  getMyOrders,
  cancelOrder,
  acceptBuyOrder,
  confirmActiveBuyOrder,
  approveActiveBuyOrder,
  createOrder,
  setDetails,
  getDetails,
  getChildOrders,
} = require('./p2p');

const {
  generateTaskOutput,
  printTasks,
} = require('./tasks');

const {
  printGoalsMenu,
  voteAction,
  createGoal,
  burnNow,
} = require('./goals');

const {
  sellSharesAction,
  printExpirience,
} = require('./shares');

const education = require('./education');

const {
  getUser,
  saveUser,
  addUserHelixBalance,
  delUserHelixBalance,
  getQuiz,
  saveQuiz,
  insertMessage,
  getMessage,
  getUserByResumeChannelId,
  insertRequest,
  insertStudent,
  insertWithdraw,
  updateWithdraw,
  getUserByEosName,
  getWithdraw
} = require('./db');

const { getDecodedParams } = require('./utils/utm');
const { parseTokenString } = require('./utils/tokens');

async function generateAccount(bot, ctx, isAdminUser, ref) {
  return new Promise(async (resolve, reject) => {

  

  const user = ctx.update.message.from;
  const generatedAccount = await generateUniAccount();

  user.eosname = generatedAccount.name;
  user.mnemonic = generatedAccount.mnemonic;
  user.wif = generatedAccount.wif;
  user.pub = generatedAccount.pub;
  user.is_admin = isAdminUser;
  user.ref = ref;

  if (!user.ref) user.ref = '';

  const params = {
    tg_id: ctx.update.message.from.id,
    username: user.eosname,
    active_pub: user.pub,
    owner_pub: user.pub,
    locale: 'ru',
    referer: user.ref, // referer
    callback: 'tg.me',
    type: 'guest',
    meta: {},
  };

  console.log('referer on register: ', params.referer, 'username: ', generatedAccount.name, 'ref: ', ref);
  try {
    const message = await axios.get(
      `${bot.getEnv().REGISTRATOR}/set`,
      {
        params,
      },
    );
    console.log("message, data: ", message.data)
    if (message && message.data) {
      // TODO set partner info
      await saveUser(bot.instanceName, user);
      resolve({eosname: user.eosname, status: "ok"})
    } else {
      await saveUser(bot.instanceName, user);
      console.error(message);
      ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–æ–±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start.', Markup.removeKeyboard());
      reject({eosname: user.eosname, status: "error", message: e.message})
      
    }
  } catch (e) {
    await saveUser(bot.instanceName, user);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–æ–±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start.', Markup.removeKeyboard());
    reject({eosname: user.eosname, status: "error", message: e.message})
  }


})
}


async function isAdmin(bot, id) {
  return Number(id) === Number(bot.getEnv().ADMIN_ID);
}


async function checkForExistBCAccount(bot, ctx) {
  const user = ctx.update.message.from.id;
  const exist = await getUser(bot.instanceName, user);

  if (!exist || !exist.eosname) {
    await generateAccount(bot, ctx, false, '');
    return true;
  }

  return true;
}

const quizDefinition = [
  { message: 'Contants' },
  { message: '–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?' },
  { message: '–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –∂–∏–≤–µ—Ç–µ?' },
];

async function startQuiz(bot, ctx, user) {
  await getQuiz(bot.instanceName, user.id);
  await ctx.deleteMessage(user.del_msg);

  const q = {
    id: user.id,
    current_quiz: 0,
    answers: quizDefinition,
    is_finish: false,
  };

  await saveQuiz(bot.instanceName, user, q);
  
  // const request = Markup.keyboard([Markup.button.contactRequest('üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º')], { columns: 1 }).resize();
  
  // const buttons = [];
  // buttons.push(Markup.button.url('üè´ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± –ò–Ω—Å—Ç–∏—Ç—É—Ç–µ', 'https://intellect.run'));
  
  // return ctx.reply('');
  //Markup.inlineKeyboard(buttons, { columns: 1 }).resize()

}


async function catchRequest(bot, user, ctx, text){

    const reply = '–í–∞—à —Ä–µ—Ü–µ–ø—Ç –ø—Ä–∏–Ω—è—Ç! –ú—ã –±–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π.';
    // const menu = Markup.keyboard(['üèÅ –∑–∞–∫—Ä—ã—Ç—å –∑–∞–ø—Ä–æ—Å'], { columns: 2 }).resize(); //, 'ü™ô –∫–æ—à–µ–ª—ë–∫'
        
    await sendMessageToUser(bot, user, { text: reply });

    let id = await sendMessageToUser(bot, {id : bot.getEnv().STUDENTS_CHANNEL_ID}, { text: text });

    await insertMessage(bot.instanceName, user, bot.getEnv().STUDENTS_CHANNEL_ID, text, id, 'STUDENTS');
    
    user.state = "chat"
    user.request_channel_id = id

    if (!user.eosname) {
      user.eosname = await generateAccount(bot, ctx, false, user.ref);
    } 
  
    await saveUser(bot.instanceName, user)  
    
    await insertRequest(bot.instanceName, user, id, text)
    
}


  async function addRequestAction(bot, user, ctx){
    
    ctx.reply("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–µ—Ü–µ–ø—Ç–∞:")
    user.state = 'newrequest'
    await saveUser(bot.instanceName, user);
  }


async function nextQuiz(bot, user, ctx) {
  const quiz = await getQuiz(bot.instanceName, user.id);

  let q;

  // eslint-disable-next-line array-callback-return
  quizDefinition.map((el, index) => {
    if (!q && index > quiz.current_quiz) {
      quiz.current_quiz = index;
      q = el;
    }
  });

  if (q) {
    if (q.buttons && q.buttons.length > 0) {
      const buttons = [];

      // eslint-disable-next-line array-callback-return
      q.buttons.map((b) => {
        buttons.push(b);
      });

      let message = q.message + ' <i>–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç —Ç–µ–∫—Å—Ç–æ–º:</i>'
      await ctx.replyWithHTML(message, Markup.keyboard(buttons, { columns: 2 }).resize());
    } else {

      const clearMenu = Markup.removeKeyboard();
      let message = q.message + ' <i>–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç —Ç–µ–∫—Å—Ç–æ–º:</i>'
      
      await ctx.replyWithHTML(message, clearMenu, { reply_markup: { remove_keyboard: true } });
    }

    await saveQuiz(bot.instanceName, user, quiz);
  } else {
    quiz.is_finish = true;
    await saveQuiz(bot.instanceName, user, quiz);
    const {mainButtons} = require('./utils/bot')
    
    const menu = Markup // , "—Ü–µ–ª–∏", "–¥–µ–π—Å—Ç–≤–∏—è"
      .keyboard(mainButtons, { columns: 2 }).resize();

    user.state = ""
    await saveUser(bot.instanceName, user)  
    
    const t = '–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞!';


    await sendMessageToUser(bot, user, { text: t }, menu);

    //send message to Channel
    // let text = `${quiz.answers[1].answer}, `
    // text += `+${quiz.answers[0].answer.phone_number || quiz.answers[0].answer}, @${user.username}\n`
    let text = ''

    k = 0

    for (const answer of quiz.answers) {
      if (k > 0){
        text += `\n${answer.message}`
        text += `\n${answer.answer}\n`
      }
      k++
    }
  
    let id = await sendMessageToUser(bot, {id : bot.getEnv().STUDENTS_CHANNEL_ID}, { text: text });

    await insertMessage(bot.instanceName, user, bot.getEnv().STUDENTS_CHANNEL_ID, text, id, 'STUDENT');
    
    await insertStudent(bot.instanceName, user, {
      userId: user.id,
      eosname: user.eosname,
      text: text,
      message_id: id,
      channel_id: bot.getEnv().STUDENTS_CHANNEL_ID
    })

    
    if (!user.eosname) {
      user.eosname = await generateAccount(bot, ctx, false, user.ref);
    } 
    
    user.state = ""
    user.resume_channel_id = id
    user.is_student = true
    await saveUser(bot.instanceName, user)  
    
    
  }
}

module.exports.init = async (botModel, bot) => {
  const protocol = bot.getEnv().PROTOCOL.replace('://', '');
  let host = String(bot.getEnv().ENDPOINT);

  let port = protocol === 'https' ? 443 : 80;

  if (host.includes(':')) {
    [host, port] = host.split(':');
    port = Number(port);
  }

  const config = {
    chains: [
      {
        name: 'FLOWER',
        rpcEndpoints: [
          {
            protocol,
            host,
            port,
          },
        ],
        explorerApiUrl: 'https://explorer.samplesite.com',
      },
    ],
    ual: {
      rootChain: 'FLOWER',
    },
    tableCodeConfig: {
      core: 'unicore',
      staker: 'staker',
      p2p: 'p2p',
      reg: 'registrator',
      part: 'part',
    },
  };

  const instance = new ChainsSingleton();
  instance.init(config);

  bot.uni = instance.getRootChain();

  const options = {
    httpEndpoint: bot.getEnv().PROTOCOL + bot.getEnv().ENDPOINT,
    verbose: false, // API logging
    sign: true,
    logger: {
      // Default logging functions
    },
    fetchConfiguration: {},
  };

  bot.eosapi = EosApi(options);

  bot.start(async (ctx) => {
    ctx.update.message.from.params = getDecodedParams(ctx.update.message.text);
    
    const clearMenu = Markup.removeKeyboard();
    let r = await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...", clearMenu, { reply_markup: { remove_keyboard: true } });
    
    await ctx.deleteMessage(r.message_id);

    const ref = await ctx.update.message.text.split('/start ')[1] || null;
    let msg2;

    if (ctx.update.message.chat.type === 'private') {
      if (!ctx.update.message.from.is_bot) {
        let user = await getUser(bot.instanceName, ctx.update.message.from.id);

        if (!user) {
          msg2 = await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –º—ã —Å–æ–∑–¥–∞—ë–º –¥–ª—è –≤–∞—Å –∞–∫–∫–∞—É–Ω—Ç –≤ –±–ª–æ–∫—á–µ–π–Ω–µ.. ‚õì');
          user = ctx.update.message.from;
          user.app = bot.getEnv().APP;
          user.ref = ref

          await saveUser(bot.instanceName, user);
          user.eosname = (await generateAccount(bot, ctx, false, ref)).eosname;
          await saveUser(bot.instanceName, user);
          await ctx.deleteMessage(msg2.message_id);
          await ctx.reply('–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! üóΩ');

        } else {
          let re_register = false
          const account = await bot.uni.readApi.getAccount(user.eosname).catch((err) => {
            re_register = true
          });
          
          if (re_register === true){
            user.eosname = (await generateAccount(bot, ctx, false, ref)).eosname;
            await saveUser(bot.instanceName, user);
          }
          user.is_student = false
          user.resume_chat_id = null
          user.resume_channel_id = null
        }
        const buttons = [];

        // buttons.push(Markup.button.callback('üÜï –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å', `nextwelcome1`));
        
        user.del_msg = (await ctx.replyWithHTML('<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ UNIWALL! </b>\n\n–ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ–≤–µ—Ä—à–∏—Ç—å –≤–∫–ª–∞–¥ –≤ —Ä–∞–∑–≤–∏—Ç–∏–µ –¶–∏—Ñ—Ä–æ–≤–æ–≥–æ –ö–æ–æ–ø–µ—Ä–∞—Ç–∏–≤–∞ –∏ –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏. ', Markup.inlineKeyboard(buttons, { columns: 1 }).resize())).message_id; //\nüõ∂üöÅüé¢üé°üåÑüåÖüèëüèèüè∏üèíü•ãü§øüèπü™Å‚õ≥Ô∏èü•Öü™Éü•å‚õ∏üèÇü™Çü§∏‚Äç‚ôÇÔ∏èü§∫üöµ‚Äç‚ôÇÔ∏èüéØ\n\n
        await saveUser(bot.instanceName, user);
        await printWallet(bot, user);
        // await startQuiz(bot, ctx, user);
      }
    } else {
      //dont have any reactions on public chats
    }
  });



   bot.on('contact', async (ctx) => {
    const user = await getUser(bot.instanceName, ctx.update.message.from.id);
    const quiz = await getQuiz(bot.instanceName, user.id);

    console.log(ctx.tg)
    quiz.answers.map((el, index) => {
      if (index === quiz.current_quiz) {
        el.answer = ctx.update.message.contact;
      }
    });

    await saveQuiz(bot.instanceName, user, quiz);
    await nextQuiz(bot, user, ctx);
  });


  bot.hears('‚ùì –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å', async (ctx) => {
    const buttons = [];

    buttons.push(Markup.button.url('–∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å ‚û°Ô∏è', 'https://t.me/knouni_bot'));
            
    ctx.reply('–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –≤ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Ä–æ–±–æ—Ç–æ–º: @knouni_bot', Markup.inlineKeyboard(buttons, { columns: 2 }).resize());
  });


  bot.hears('üëå –æ—Ç–∑—ã–≤—ã', async (ctx) => {
    const buttons = [];

    buttons.push(Markup.button.callback('—Å–æ–∑–¥–∞—Ç—å –æ—Ç–∑—ã–≤ ‚óÄÔ∏è', `feedback`));
    

    buttons.push(Markup.button.url('–ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã ‚û°Ô∏è', bot.getEnv().TESTIMONIAL_CHANNEL));
            
    ctx.reply('–ê–∫–∞–¥–µ–º–∏—è –ö–∞–π—Ñ–∞ –±–µ—Ä–µ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç –æ—Ç–∑—ã–≤—ã —Å–≤–æ–∏—Ö –∫–∞–π—Ñ—É—à:', Markup.inlineKeyboard(buttons, { columns: 2 }).resize());
  });


  bot.hears('üóì —Å–æ–±—ã—Ç–∏—è', async (ctx) => {
    const buttons = [];

    buttons.push(Markup.button.url('–ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–±—ã—Ç–∏—è ‚û°Ô∏è', bot.getEnv().EVENTS_CHANNEL));
            
    ctx.reply('–°–æ–±—ã—Ç–∏—è –∫–∞–π—Ñ–∞–¥–µ–º–∏–∫–æ–≤ –∏ –∫–∞–π—Ñ–æ–ª–æ–≥–æ–≤ –ø—Ä–æ—Ö–æ–¥—è—Ç –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É:', Markup.inlineKeyboard(buttons, { columns: 2 }).resize());
  });


  bot.hears('–¥–µ–π—Å—Ç–≤–∏—è', async (ctx) => {
    // await checkForExistBCAccount(bot, ctx);
    const user = await getUser(bot.instanceName, ctx.update.message.from.id);
    printTasks(ctx, user);
  });

  bot.hears('üßôüèª‚Äç‚ôÇÔ∏è –∫–∞–π—Ñ–æ–ª–æ–≥–∏—è', async (ctx) => {
    let user = await getUser(bot.instanceName, ctx.update.message.from.id);
    
    const buttons = [];
    let text = ""
    text += "<b>–°—Ç–∞—Ç—É—Å—ã –≤ –ê–∫–∞–¥–µ–º–∏–∏ –ö–∞–π—Ñ–∞:</b>"
    text += '\n<i>–ö–∞–π—Ñ—É—à–∏</i> - —ç—Ç–æ –ª—é–¥–∏, –ª—é–±—è—â–∏–µ –ø–æ–ª—É—á–∞—Ç—å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ –æ—Ç –∂–∏–∑–Ω–∏.'
    text += `\n<i>–ö–∞–π—Ñ–æ–ª–æ–≥–∏</i> - —ç—Ç–æ –ª—é–¥–∏, –æ–±—É—á–∞—é—â–∏–µ –ø–æ–ª—É—á–∞—Ç—å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ –æ—Ç –∂–∏–∑–Ω–∏.`
    text += `\n<i>–ö–∞–π—Ñ–∞–¥–µ–º–∏–∫–∏</i> - —ç—Ç–æ –º–∞—Å—Ç–µ—Ä–∞ –ø–æ–ª—É—á–∞—Ç—å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ –æ—Ç –∂–∏–∑–Ω–∏.`
    text += '\n\n–¢—ã —Ç–∞–∫–æ–π? –¢–æ–≥–¥–∞ –∑–∞—è–≤–∏ –æ —Å–µ–±–µ!'

    buttons.push(Markup.button.callback('–∑–∞—è–≤–∏—Ç—å üôã‚Äç‚ôÇÔ∏è', "startquiz"));
    buttons.push(Markup.button.url('–∫–∞–Ω–∞–ª –∫–∞–π—Ñ—É—à ‚û°Ô∏è', bot.getEnv().STUDENTS_CHANNEL));
            
    user.del_msg = (ctx.replyWithHTML(text, Markup.inlineKeyboard(buttons, { columns: 1 }).resize())).message_id;
    await saveUser(bot.instanceName, user)
  });


 bot.hears('üåÄ –∫–∞—Å—Å–∞', async (ctx) => {
    let user = await getUser(bot.instanceName, ctx.update.message.from.id);
    if (!user) {
      if (await restoreAccount(bot, ctx, ctx.update.message.from) === false) return;
      user = await getUser(bot.instanceName, ctx.update.message.from.id);
    }

    await checkForExistBCAccount(bot, ctx);
    
    await printHelixWallet(bot, ctx, user, bot.getEnv().CORE_HOST);

  });



 bot.hears('üÜï –±—Ä–æ—Å–∏—Ç—å –≤—ã–∑–æ–≤', async (ctx) => {
    let user = await getUser(bot.instanceName, ctx.update.message.from.id);
    await addRequestAction(bot, user, ctx)

  });


 bot.hears('üíù –∫–∞–π—Ñ–æ–≤—ã–π –∫–∞–Ω–∞–ª', async (ctx) => {
    let user = await getUser(bot.instanceName, ctx.update.message.from.id);
    
    ctx.reply("–°—Å—ã–ª–∫–∞: ")
    
  });

 bot.hears('üí≠ —á–∞—Ç –∫–∞–π—Ñ–æ–ª–æ–≥–æ–≤', async (ctx) => {
    let user = await getUser(bot.instanceName, ctx.update.message.from.id);
    
    ctx.reply("–°—Å—ã–ª–∫–∞: ")
    
  });


 bot.hears('üÜï –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç', async (ctx) => {
    let user = await getUser(bot.instanceName, ctx.update.message.from.id);
    await addRequestAction(bot, user, ctx)
    
  });




  bot.hears('ü™ô –∫–æ—à–µ–ª—ë–∫', async (ctx) => {
    let user = await getUser(bot.instanceName, ctx.update.message.from.id);
    if (ctx.update.message.chat.type === 'private') {
      await printWallet(bot, user);
    } 

  });



  bot.hears('üéØ —Ü–µ–ª–∏', async (ctx) => {
    let user = await getUser(bot.instanceName, ctx.update.message.from.id);
    
    await printGoalsMenu(bot, ctx, user, bot.getEnv().CORE_HOST);

  });



  bot.hears('üé´ –±–∏–ª–µ—Ç—ã', async (ctx) => {
    let user = await getUser(bot.instanceName, ctx.update.message.from.id);
    if (ctx.update.message.chat.type === 'private') {
      // await printTickets(bot, user, ctx);
    } 

  });


  bot.on('message', async (ctx) => {
    let user = await getUser(bot.instanceName, ctx.update.message.from.id);
    

    if (user) {


      if (ctx.update.message.chat.type !== 'private') {//CATCH MESSAGE ON ANY PUBLIC CHAT WHERE BOT IS ADMIN
        let { text } = ctx.update.message;
        
        // console.log('need find reply: ', ctx.update.message.reply_to_message);
        
        if (ctx.update.message.reply_to_message) { //–ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —á—å–µ-—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

          const msg = await getMessage(bot.instanceName, ctx.update.message.reply_to_message.forward_from_message_id || ctx.update.message.reply_to_message.message_id);
          
          if (msg && msg.message_id) {
            // console.log('resend back to: ', msg);
            const id = await sendMessageToUser(bot, { id: msg.id }, { text });

            await insertMessage(bot.instanceName, user, user.id, text, 'question', id);

            
          }
        

        } else {
          await insertMessage(bot.instanceName, user, 'user', text);
        }
      } else {//–ï—Å–ª–∏ —ç—Ç–æ –¥–∏–∞–ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –±–æ—Ç–æ–º
        //–ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∫–≤–∏–∑ –ª–∏


        const quiz = await getQuiz(bot.instanceName, user.id);
        let { text } = ctx.update.message;
        // console.log("on else", text)

        if (text === '/skip'){
          const menu = Markup
            .keyboard(mainButtons, { columns: 2 }).resize();

          const t = '–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞.';

          await sendMessageToUser(bot, user, { text: t }, menu);
          
        } else if (quiz && !quiz.is_finish) {
          quiz.answers.map((el, index) => {
            if (index === quiz.current_quiz) {
              el.answer = text;
            }
          });

          await saveQuiz(bot.instanceName, user, quiz);
          await nextQuiz(bot, user, ctx);
        } else if (user.state) {
            if (user.state === 'transfer_to') {
              const account = await bot.uni.readApi.getAccount(text).catch((err) => {
                console.error(err);
                return null;
              });

              if (account) {
                user.state = 'transfer_amount';
                user.transfer_action.data.to = text;
                saveUser(bot.instanceName, user).then();
                await ctx.replyWithHTML('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞:');
              } else {
                await ctx.replyWithHTML('–ê–∫–∫–∞—É–Ω—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–º—è –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.');
              }
            } 


            else if (user.state === 'set_goal_title') {
              user.create_goal.title = text;
              user.create_goal.description = "";
              user.create_goal.target = `${parseFloat(bot.getEnv().TARGET).toFixed(4)} ${bot.getEnv().SYMBOL}`;
              
              saveUser(bot.instanceName, user);

              const buttons = [];

              buttons.push(Markup.button.callback('–û—Ç–º–µ–Ω–∞', 'cancelcreategoal'));
              buttons.push(Markup.button.callback('–î–∞', 'creategoalnow'));

              let toPrint = '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Ü–µ–ª—å –Ω–∞ 300$?';
              toPrint += `\n\n${user.create_goal.title}`;
              // toPrint += `\n–û–ø–∏—Å–∞–Ω–∏–µ: ${user.create_goal.description}`;
              // toPrint += `\n–¶–µ–ª—å: ${user.create_goal.target}`;
              // toPrint += '\n–í–∞—à –≤–∑–Ω–æ—Å: 10.0000 FLOWER';
              toPrint += `\n________________________________________________`
              toPrint += '\n–í–∞—à–∞ —Ü–µ–ª—å –±—É–¥–µ—Ç –∞–Ω–æ–Ω–∏–º–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª–µ —Ü–µ–ª–µ–π –∫–∞–π—Ñ–æ–ª–æ–≥–æ–≤.';

              // eslint-disable-next-line max-len
              await ctx.replyWithHTML(toPrint, Markup.inlineKeyboard(buttons, { columns: 2 }).resize());
            
            } 

            
            else if (user.state === 'set_withdraw_amount') {
              const helix = await getHelixParams(bot, bot.getEnv().CORE_HOST);

              let {min, max} = await getMaxWithdrawAmount(bot, user, ctx)
              const amount = `${parseFloat(text).toFixed(helix.host.precision)} ${helix.host.symbol}`;
              

              if (parseFloat(amount) > parseFloat(max)) ctx.reply(`–û—à–∏–±–∫–∞!\n\n –í–≤–µ–¥–µ–Ω–Ω–∞—è —Å—É–º–º–∞ –±–æ–ª—å—à–µ –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ –æ—Ç ${min} –¥–æ ${max} —Ü–∏—Ñ—Ä–∞–º–∏:`); // , Markup.inlineKeyboard(buttons, {columns: 1}).resize()
              
              else if (parseFloat(min) > parseFloat(amount)){
                
                ctx.reply(`–û—à–∏–±–∫–∞!. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: ${min}, –≤—ã —Å—Ç–∞–≤–∏—Ç–µ –Ω–∞ –≤—ã–≤–æ–¥: ${amount}. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ —Å—É–º–º—ã —Ü–∏—Ñ—Ä–∞–º–∏:`); // , Markup.inlineKeyboard(buttons, {columns: 1}).resize()
              
              } else {

                user.state = "set_withdraw_address"
                user.on_withdraw = {
                  amount
                }
                await saveUser(bot.instanceName, user);

                ctx.reply("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è USDT.TRC20: ")

              }


            } 

            else if (user.state === 'set_withdraw_address') {
              user.on_withdraw.address = text
              await saveUser(bot.instanceName, user);

              const buttons = [];

              buttons.push(Markup.button.callback('–î–∞', 'withdrawaction'));
              buttons.push(Markup.button.callback('–û—Ç–º–µ–Ω–∞', `backto wallet `));

              let text2 = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ! –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –≤—ã–≤–æ–¥?"
              text2 += `\n\n–°—É–º–º–∞: ${user.on_withdraw.amount}`
              text2 += `\n–ê–¥—Ä–µ—Å: ${user.on_withdraw.address}`

              ctx.reply(text2, Markup.inlineKeyboard(buttons, { columns: 2 }))


            } 

            else if (user.state === 'set_deposit_amount') {
              const { hostname } = user.deposit_action;
              const helix = await getHelixParams(bot, user.deposit_action.hostname);

              let depositNow = false;

              const amount = `${parseFloat(text).toFixed(helix.host.precision)} ${helix.host.symbol}`;
              let contract;

              // if (user.is_demo) contract = 'faketoken';

              const liquidBal = await getLiquidBalance(bot, user.eosname, 'FLOWER', contract);

              const maxDeposit = await getCondition(bot, hostname, 'maxdeposit');

              if (maxDeposit > 0) {
                const currentDeposit = await getCurrentUserDeposit(bot, hostname, user.eosname);
                if (parseFloat(currentDeposit) >= parseFloat(maxDeposit) / 10000) await ctx.reply(`–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ø—Ä–µ–¥–µ–ª–∞ –≤–∑–Ω–æ—Å–æ–≤ –≤ —ç—Ç–æ–π –∫–∞—Å—Å–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–µ–ª: ${(parseFloat(maxDeposit) / 10000).toFixed(4)} FLOWER, –≤–∞—à —Ç–µ–∫—É—â–∏–π –≤–∑–Ω–æ—Å: ${currentDeposit}`);
                else {
                  depositNow = true;
                }
              } else if (parseFloat(amount) > parseFloat(liquidBal)) {
                await ctx.reply(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –≤–∑–Ω–æ—Å–∞. –í–∞—à –±–∞–ª–∞–Ω—Å: ${liquidBal}. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∑–∞–Ω–æ–≤–æ.`);
              } else if (parseFloat(amount) > parseFloat(helix.currentPool.remain)) {
                await ctx.reply(`–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –ø—Ä–∏–Ω—è—Ç—å —ç—Ç–æ—Ç —Å—Ç–æ–ª #${helix.currentPool.pool_num}: ${helix.currentPool.remain}. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∑–∞–Ω–æ–≤–æ.`);
              } else {
                depositNow = true;
              }

              if (depositNow) {
                user.state = '';
                user.deposit_action.quantity = amount;
                const buttons = [];

                buttons.push(Markup.button.callback('–î–∞', 'depositaction'));
                buttons.push(Markup.button.callback('–ù–µ—Ç', `backto helix ${user.deposit_action.hostname}`));

                ctx.reply(`–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –≤–∑–Ω–æ—Å –≤ –∫–∞—Å—Å—É ${user.deposit_action.hostname} –Ω–∞ —Å—É–º–º—É ${user.deposit_action.quantity}?`, Markup.inlineKeyboard(buttons, { columns: 2 }));
                await saveUser(bot.instanceName, user);
              }
            }


            else if (user.state === 'transfer_amount') {
              const amount = `${parseFloat(text).toFixed(4)} FLOWER`;

              const buttons = [];

              buttons.push(Markup.button.callback('–î–∞', `transfaction ${amount}`));
              buttons.push(Markup.button.callback('–ù–µ—Ç', 'canceltransfer'));

              user.transfer_action.data.amount = amount;

              const textTo = `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –ø–∞—Ä—Ç–Ω—ë—Ä—É ${user.transfer_action.data.to} –Ω–∞ —Å—É–º–º—É ${amount}?`;

              ctx.reply(textTo, Markup.inlineKeyboard(buttons, { columns: 2 }));
              user.state = '';
              await saveUser(bot.instanceName, user);
            } else if (user.state === 'newrequest'){
            // console.log("HERE 1")
            await catchRequest(bot, user, ctx, text)

          } else if (user.state === 'chat') {
            // console.log("try to send: ", bot.getEnv().CHAT_CHANNEL, 'reply_to: ', user.resume_chat_id)
            const id = await sendMessageToUser(bot, { id: bot.getEnv().CHAT_CHANNEL }, { text }, {reply_to_message_id : user.resume_chat_id});

            await insertMessage(bot.instanceName, user, bot.getEnv().CHAT_CHANNEL, text, id, 'chat');

            await saveUser(bot.instanceName, user);

            // ctx.reply('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
          } 
        } else {
          await insertMessage(bot.instanceName, user, 'user', text);
        }
      }
    } else {
      if (ctx.update.message && ctx.update.message.is_automatic_forward === true && ctx.update.message.sender_chat){
          if (ctx.update.message.sender_chat.id === bot.getEnv().STUDENTS_CHANNEL){ //–µ—Å–ª–∏ —Å–ª–æ–≤–∏–ª–∏ –ø–µ—Ä–µ—Å—ã–ª–∫—É –∏–∑ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            if(ctx.update.message.forward_from_chat.id === bot.getEnv().STUDENTS_CHANNEL){ //—Ç–æ –Ω—É–∂–Ω–æ –∑–∞–ø–æ–º–Ω–∏—Ç—å ID —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–± –æ—Ç–≤–µ—á–∞—Ç—å –≤ —Ç–æ–º –∂–µ —Ç—Ä–µ–¥–µ
              user = await getUserByResumeChannelId(bot.instanceName, ctx.update.message.forward_from_message_id)

              if (user && !user.resume_chat_id){
                // console.log("catch forwarded messsage to chat: ", ctx.update.message.message_id)
                user.resume_chat_id = ctx.update.message.message_id
                await saveUser(bot.instanceName, user);  
              }
              
            }
          }
        } else { //–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–≤–µ—Ç –≤ –ª–∏—á–∫—É –µ—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Ä–µ–∑—é–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      }
    }
  });


  async function buyTicket(bot, user, ctx, currency) {
    try{

      let params = {
        username: user.eosname,
        currency: currency
      }
      let path = `${bot.getEnv().PAY_GATEWAY}/generate`
      
      const result = await axios.post(
        path,
        params
      );
      
      if (result.data.status === 'ok'){
        await ctx.replyWithHTML(`–î–ª—è –æ–ø–ª–∞—Ç—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º USDT –≤ —Å–µ—Ç–∏ TRC20.\n–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –æ–ø–ª–∞—Ç—ã: —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –í–ª–∞–¥–æ–º (@skyone77777) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 150 USDT.TRC20. \n\n–ê–¥—Ä–µ—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã –≤ USDT –ø–æ—Å—Ç—É–ø–∏—Ç —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:`)
        await ctx.reply(`${result.data.address}`)
      }
      else ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ")

    } catch(e){
      ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ")
    }
    
  }


  bot.action('startquiz', async (ctx) => {
    const user = await getUser(bot.instanceName, ctx.update.callback_query.from.id);
    user.state = ""

    if (user.is_student === false){
      await startQuiz(bot, ctx, user)
      await nextQuiz(bot, user, ctx);
    } else {
      ctx.reply('–í—ã —É–∂–µ –∫–∞–π—Ñ—É—à–∞! –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–ª—å–∑—è.')
    }
  });


  bot.action(/confirmwithdraw (\w+)/gi, async (ctx) => {
    const withdraw_id = ctx.match[1];
    // console.log("withdraw_id: ", withdraw_id)
    let wobj = await getWithdraw(bot.instanceName, withdraw_id)
    // console.log('wobj', wobj)
    const user = await getUser(bot.instanceName, wobj.userId);

    await updateWithdraw(bot.instanceName, withdraw_id, "confirmed")

    ctx.editMessageText('–≤—ã–≤–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∞–Ω');

    //TO CLIENT
    await sendMessageToUser(bot, user, { text: `–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ ${wobj.amount} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞` });

    //TODO make db insert
    //TODO send request to admin
    //
  });

  bot.action('withdrawaction', async (ctx) => {
    const user = await getUser(bot.instanceName, ctx.update.callback_query.from.id);
    user.state = ""
    let withdraw_id = await insertWithdraw(bot.instanceName, user, {
      userId: user.id,
      eosname: user.eosname,
      amount: user.on_withdraw.amount,
      address: user.on_withdraw.address,
      created_at: new Date(),
      status: 'created'
    })

    const balances = await getUserHelixBalances(bot, bot.getEnv().CORE_HOST, user.eosname);
    

    //MASSWITHDRAWACTION
    massWithdrawAction(bot, user, bot.getEnv().CORE_HOST, balances.all).then(res => {

      //TODO make a burn from user with address in memo
      retireAction(bot, user, user.on_withdraw.amount, user.on_withdraw.address).then(async () => {
        ctx.deleteMessage(); //delete buttons

        const buttons = [];
        buttons.push(Markup.button.callback('–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É', `confirmwithdraw ${withdraw_id}`));
        
        //TO CLIENT
        await sendMessageToUser(bot, user, { text: `–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞ —Å—É–º–º—É ${user.on_withdraw.amount}. –ü–µ—Ä–µ–≤–æ–¥ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –Ω–∞ –∞–¥—Ä–µ—Å:\n${user.on_withdraw.address}` });

        //TO ADMIN
        
        let admin = await getUserByEosName(bot.instanceName, bot.getEnv().OPERATOR_EOSNAME)
        await sendMessageToUser(bot, admin, { text: `–ü–æ–ª—É—á–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –Ω–∞ —Å—É–º–º—É:\n${user.on_withdraw.amount} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.eosname} (${user.id}). –ü–µ—Ä–µ–≤–æ–¥ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –Ω–∞ –∞–¥—Ä–µ—Å:` });
        await sendMessageToUser(bot, admin, { text: `${user.on_withdraw.address}` }, Markup.inlineKeyboard(buttons, { columns: 1 }).resize());

        
        await updateWithdraw(bot.instanceName, withdraw_id, "waiting")
        
      }).catch(e => {
        console.error(e)
        ctx.reply(`–û—à–∏–±–∫–∞! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º: ${e.message}`)      
      }) 
    }).catch(e => {
      console.error(e)
        ctx.reply(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤—ã–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º: ${e.message}`)      
    })

    //
  });


  bot.action('nextwelcome1', async (ctx) => {
    const user = await getUser(bot.instanceName, ctx.update.callback_query.from.id);
    
    const buttons = [];

    await ctx.deleteMessage(user.del_msg);

    buttons.push(Markup.button.callback('‚û°Ô∏è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å', `nextwelcome2`));
    const menu = Markup // , "—Ü–µ–ª–∏", "–¥–µ–π—Å—Ç–≤–∏—è"
      .keyboard(mainButtons, { columns: 2 }).resize();

    user.del_msg = (await ctx.reply('–ö–∞–∂–¥—ã–π NFT-—Ç–æ–∫–µ–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ–±–ª–∞–¥–∞—Ç–µ–ª—é –ø–æ–∂–∏–∑–Ω–µ–Ω–Ω—É—é –¥–æ–ª—é –æ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –æ–±–æ—Ä–æ—Ç–∞ –¶–∏—Ñ—Ä–æ–≤–æ–≥–æ –ö–æ–æ–ø–µ—Ä–∞—Ç–∏–≤–∞.', menu)).message_id; 
    await saveUser(bot.instanceName, user);
  });


  bot.action('nextwelcome2', async (ctx) => {
    const user = await getUser(bot.instanceName, ctx.update.callback_query.from.id);
    
    const buttons = [];
    await ctx.deleteMessage(user.del_msg);

    // buttons.push(Markup.button.callback('‚û°Ô∏è –Ω–∞—á–∞—Ç—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ', `startquiz`));
  
    // user.del_msg = (await ctx.reply('–ö–∞–∂–¥—ã–π NFT-—Ç–æ–∫–µ–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ–±–ª–∞–¥–∞—Ç–µ–ª—é –ø–æ–∂–∏–∑–Ω–µ–Ω–Ω—É—é –¥–æ–ª—é –æ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –æ–±–æ—Ä–æ—Ç–∞ –¶–∏—Ñ—Ä–æ–≤–æ–≥–æ –ö–æ–æ–ø–µ—Ä–∞—Ç–∏–≤–∞.', Markup.inlineKeyboard(buttons, { columns: 1 }).resize())).message_id; 
    await saveUser(bot.instanceName, user);
    await printWallet(bot, user);
    // const buttons = [];
    // await ctx.deleteMessage(user.del_msg);

    // buttons.push(Markup.button.callback('üé´ –∫—É–ø–∏—Ç—å –±–∏–ª–µ—Ç', `buyticket`));

  });

// bot.action('nextwelcome3', async (ctx) => {
//     const user = await getUser(bot.instanceName, ctx.update.callback_query.from.id);
    
//     const buttons = [];
//     await ctx.deleteMessage(user.del_msg);

//     buttons.push(Markup.button.callback('‚û°Ô∏è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å', `nextwelcome4`));
  
//     user.del_msg = (await ctx.reply('–°–æ–≤–µ—Ä—à–∞—è –≤–∫–ª–∞–¥ –≤ —Ä–∞–∑–≤–∏—Ç–∏–µ –¶–∏—Ñ—Ä–æ–≤–æ–≥–æ –ö–æ–æ–ø–µ—Ä–∞—Ç–∏–≤–∞, –≤—ã —Å–æ–∑–¥–∞—ë—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É ', Markup.inlineKeyboard(buttons, { columns: 1 }).resize())).message_id; 
//     await saveUser(bot.instanceName, user);

//   });


bot.action('nextwelcome4', async (ctx) => {
    const user = await getUser(bot.instanceName, ctx.update.callback_query.from.id);
    
    const buttons = [];
    await ctx.deleteMessage(user.del_msg);

    buttons.push(Markup.button.callback('‚û°Ô∏è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å', `nextwelcome5`));
  
    user.del_msg = (await ctx.reply('', Markup.inlineKeyboard(buttons, { columns: 1 }).resize())).message_id; 
    await saveUser(bot.instanceName, user);

});


bot.action('nextwelcome5', async (ctx) => {
    const user = await getUser(bot.instanceName, ctx.update.callback_query.from.id);
    
    const buttons = [];
    await ctx.deleteMessage(user.del_msg);

    buttons.push(Markup.button.callback('‚û°Ô∏è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å', `nextwelcome6`));
  
    user.del_msg = (await ctx.reply('–ù–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏ —Å–∫–æ—Ä–æ—Å—Ç—å –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏—è –≤–∞—à–µ–π –∫–∞–π—Ñ–æ–≤–æ–π —Ü–µ–ª–∏ –≤–ª–∏—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ—Ä–∞–∫—Ü–∏–π –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö —Å–µ—Ç—å—é –±–∏–ª–µ—Ç–æ–≤.', Markup.inlineKeyboard(buttons, { columns: 1 }).resize())).message_id; 
    await saveUser(bot.instanceName, user);

});



bot.action('nextwelcome6', async (ctx) => {
    const user = await getUser(bot.instanceName, ctx.update.callback_query.from.id);
    
    const buttons = [];
    await ctx.deleteMessage(user.del_msg);

    buttons.push(Markup.button.callback('üé´ –∫—É–ø–∏—Ç—å –±–∏–ª–µ—Ç', `buyticket`));
  
    user.del_msg = (await ctx.reply('–¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —É—á–∞—Å—Ç–Ω–∏–∫–∏ –æ—Å—É—â–µ—Å—Ç–≤–ª—è—é—Ç —Å–≤–æ–∏ –∫–∞–π—Ñ–æ–≤—ã–µ —Ü–µ–ª–∏ –∑–¥–µ—Å—å, –ø–æ–∫–∞ –ø–æ–∫—É–ø–∞—é—Ç –±–∏–ª–µ—Ç—ã –ê–∫–∞–¥–µ–º–∏–∏.', Markup.inlineKeyboard(buttons, { columns: 1 }).resize())).message_id; 
    await saveUser(bot.instanceName, user);

});

  bot.action(/next (\w+)/gi, async (ctx) => {
    const user = await getUser(bot.instanceName, ctx.update.callback_query.from.id);

    const nextId = parseInt(ctx.match[1], 10);
    console.log("nextId", nextId)
    await printTickets(bot, user, ctx, nextId);
  });

  bot.action('buyticket', async (ctx) => {
    const user = await getUser(bot.instanceName, ctx.update.callback_query.from.id);
    await ctx.deleteMessage();
    // console.log("–∫—É–ø–∏—Ç—å –±–∏–ª–µ—Ç")
    // await setBuyMenu(ctx)
    buyTicket(bot, user, ctx, "USDT.TRC20")
    // ctx.reply('–ø–æ–∫—É–ø–∞—é!')
  });

  bot.action('refreshwallet', async (ctx) => {
    const user = await getUser(bot.instanceName, ctx.update.callback_query.from.id);
    await ctx.deleteMessage();
    // console.log("–∫—É–ø–∏—Ç—å –±–∏–ª–µ—Ç")
    // await setBuyMenu(ctx)
    await printWallet(bot, user);
    // ctx.reply('–ø–æ–∫—É–ø–∞—é!')
  });


  bot.action('cantbuyticket', async (ctx) => {
    const user = await getUser(bot.instanceName, ctx.update.callback_query.from.id);
    // await ctx.deleteMessage();
    
    await cantBuyTicket(bot, user)
    
    // console.log("–∫—É–ø–∏—Ç—å –±–∏–ª–µ—Ç")
    // await setBuyMenu(ctx)
    // buyTicket(bot, user, ctx, "USDT.TRC20")
    // ctx.reply('–ø–æ–∫—É–ø–∞—é!')
  });


 bot.action(/creategoal (\w+)/gi, async (ctx) => {
    const user = await getUser(bot.instanceName, ctx.update.callback_query.from.id);

    const hostname = ctx.match[1];

    user.state = 'set_goal_title';
    user.create_goal = { hostname };
    saveUser(bot.instanceName, user);

    ctx.replyWithHTML(`–ö–∞–∫ –≤—ã –ø–æ—Ç—Ä–∞—Ç–∏—Ç–µ ${bot.getEnv().TARGET}$ ? <i>–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç —Ç–µ–∫—Å—Ç–æ–º: </i>`);
  });

 bot.action('creategoalnow', async (ctx) => {
    const user = await getUser(bot.instanceName, ctx.update.callback_query.from.id);

    createGoal(bot, ctx, user);
  });

  bot.action('cancelcreategoal', async (ctx) => {
    const user = await getUser(bot.instanceName, ctx.update.callback_query.from.id);

    user.state = '';
    user.create_goal = {};
    saveUser(bot.instanceName, user);

    ctx.editMessageText('–°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
  });

  bot.action('depositaction', async (ctx) => {
    const user = await getUser(bot.instanceName, ctx.update.callback_query.from.id);

    await depositAction(bot, ctx, user);
  });

bot.action(/deposit (\w+)/gi, async (ctx) => {
    let user = await getUser(bot.instanceName, ctx.update.callback_query.from.id);
    if (!user) {
      if (await restoreAccount(bot, ctx, ctx.update.callback_query.from) === false) return;
      user = await getUser(bot.instanceName, ctx.update.callback_query.from.id);
    }

    let contract;
    // if (user.is_demo) contract = 'faketoken';

    const hostname = ctx.match[1];
    const params = await getHelixParams(bot, hostname);

    const liquidBal = await getLiquidBalance(bot, user.eosname, 'FLOWER', contract);

    const maxDeposit = await getCondition(bot, hostname, 'maxdeposit');
    // eslint-disable-next-line max-len
    let max = parseFloat(params.currentPool.remain) >= parseFloat(liquidBal) ? liquidBal : params.currentPool.remain;

    if (maxDeposit > 0) {
      const currentDeposit = await getCurrentUserDeposit(bot, hostname, user.eosname);
      if (parseFloat(currentDeposit) >= parseFloat(maxDeposit) / 10000) await ctx.reply(`–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ø—Ä–µ–¥–µ–ª–∞ –≤–∑–Ω–æ—Å–æ–≤ –≤ —ç—Ç–æ–π –∫–∞—Å—Å–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–µ–ª: ${(parseFloat(maxDeposit) / 10000).toFixed(4)} FLOWER`);
      else {
        user.state = 'set_deposit_amount';
        user.deposit_action = { hostname };
        await saveUser(bot.instanceName, user);

        const max2 = `${((maxDeposit / 10000) - parseFloat(currentDeposit)).toFixed(4)} FLOWER`;

        // eslint-disable-next-line max-len
        if (parseFloat(max2) >= parseFloat(liquidBal) && parseFloat(liquidBal) <= parseFloat(params.currentPool.remain)) {
          max = liquidBal;
          // eslint-disable-next-line max-len
        } else if (parseFloat(max2) >= parseFloat(liquidBal) && parseFloat(liquidBal) >= parseFloat(params.currentPool.remain)) {
          max = params.currentPool.remain;
          // eslint-disable-next-line max-len
        } else if (parseFloat(max2) <= parseFloat(liquidBal) && parseFloat(liquidBal) >= parseFloat(params.currentPool.remain)) {
          // eslint-disable-next-line max-len
          max = parseFloat(max2) >= parseFloat(params.currentPool.remain) ? params.currentPool.remain : max2;
          // eslint-disable-next-line max-len
        } else if (parseFloat(max2) <= parseFloat(liquidBal) && parseFloat(liquidBal) <= parseFloat(params.currentPool.remain)) {
          // eslint-disable-next-line max-len
          max = parseFloat(max2) >= parseFloat(params.currentPool.remain) ? params.currentPool.remain : max2;
        }

        await ctx.reply(`–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤–∑–Ω–æ—Å–∞ –¥–æ ${max}.`);
      }
    } else {
      user.state = 'set_deposit_amount';
      user.deposit_action = { hostname };
      await saveUser(bot.instanceName, user);
      await ctx.reply(`–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤–∑–Ω–æ—Å–∞ –¥–æ ${max}.`);
    }
  });


bot.action('nextwelcome5', async (ctx) => {
    const buttons = [];
    await ctx.deleteMessage();

    buttons.push(Markup.button.callback('üÜï –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å 3', `nextwelcome4`));
  
    await ctx.reply('–ß—Ç–æ–±—ã ', Markup.inlineKeyboard(buttons, { columns: 1 }).resize()); 

  });



  bot.action('mypartners', async (ctx) => {
    const user = await getUser(bot.instanceName, ctx.update.callback_query.from.id);
    await printPartners(bot, user);
  });

  bot.action('sendtoall', async (ctx) => {
    const user = await getUser(bot.instanceName, ctx.update.callback_query.from.id);

    const isAdminUser = isAdmin(bot, user.id);
    const message = user.message_to_send;

    user.message_to_send = null;

    await saveUser(bot.instanceName, user);

    if (isAdminUser && message) {
      const count = await sendMessageToAll(bot, { text: message });
      await ctx.replyWithHTML(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${count} –ø–∞—Ä—Ç–Ω—ë—Ä–∞–º`);
    } else {
      await ctx.replyWithHTML('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤');
    }
  });


  bot.action(/transfer/gi, async (ctx) => {
    const user = await getUser(bot.instanceName, ctx.update.callback_query.from.id);
    user.state = 'transfer_to';
    user.transfer_action = { name: 'transfer', data: { from: user.eosname, to: '', memo: '' } };
    saveUser(bot.instanceName, user).then();
    ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è:');
  });

  bot.action(/transfaction (.*$)/gm, async (ctx) => {
    const user = await getUser(bot.instanceName, ctx.update.callback_query.from.id);
    const amount = ctx.match[1];

    await transferAction(bot, user, amount, ctx);
  });


// async function showBuySellMenu(bot, user, ctx) {
//   const myOrders = await bot.uni.p2pContract.getOrders(user.eosname);
//   const buyOrders = myOrders.filter((el) => el.type === 'buy');

//   if (user.state === 'giveHelp') {
//     if (buyOrders.length === 0) setBuyMenu(ctx);
//     else {
//       const buyOrder = buyOrders[0];
//       const buttons2 = [];
//       buttons2.push(Markup.button.callback('–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É', `cancelorder ${buyOrder.id}`));
//       ctx.reply(`–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–∫–∞–∑–∞–Ω–∏–µ –ø–æ–º–æ—â–∏ –Ω–∞ —Å—É–º–º—É ${buyOrder.out_quantity}. `, Markup.inlineKeyboard(buttons2, { columns: 1 }).resize());
//     }
//   } else if (user.state === 'getHelp') {
//     await setSellMenu(bot, ctx, user);
//   }
// }
  
  async function getMaxWithdrawAmount(bot, user, ctx) {
    const liquidBal = await getLiquidBalance(bot, user.eosname, bot.getEnv().SYMBOL);
    const balances = await getUserHelixBalances(bot, bot.getEnv().CORE_HOST, user.eosname);
    
    const min = `${(2 / parseFloat(1)).toFixed(0)} ${bot.getEnv().SYMBOL}`;
    const max = `${(((parseFloat(balances.totalBalances) + parseFloat(liquidBal)) * parseFloat(1)) / parseFloat(1)).toFixed(4)} ${bot.getEnv().SYMBOL}`;
    
    return {min, max}

  }


  bot.action(/backto (\w+)\s(\w+)?/gi, async (ctx) => {
    const user = await getUser(bot.instanceName, ctx.update.callback_query.from.id);
    const to = ctx.match[1];
    const hostname = ctx.match[2];
    
    user.state = ""

    await saveUser(bot.instanceName, user);

    if (to === 'helixs') await printHelixs(bot, ctx, user, null, hostname);

    else if (to === 'helix') {
      await printHelixWallet(bot, ctx, user, hostname);
    } else if (to === 'wallet') {
      await printWallet(bot, user);
    }
  });

  bot.action("withdraw", async (ctx) => {
    const user = await getUser(bot.instanceName, ctx.update.callback_query.from.id);

    user.state = 'set_withdraw_amount';
    await saveUser(bot.instanceName, user);
    // showBuySellMenu(bot, user, ctx);
    // console.log("helixBalances: ", balances)
    let {min, max} = await getMaxWithdrawAmount(bot, user, ctx)
    
    if (parseFloat(max) >= parseFloat(min)) ctx.reply(`–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É!\n\n –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ –æ—Ç ${min} –¥–æ ${max} —Ü–∏—Ñ—Ä–∞–º–∏.`); // , Markup.inlineKeyboard(buttons, {columns: 1}).resize()
    else {
      ctx.reply(`–û—à–∏–±–∫–∞!. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: ${min}, –Ω–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ: ${max}. `); // , Markup.inlineKeyboard(buttons, {columns: 1}).resize()
    }

    // if (parseFloat(liquidBal) === 0){
    //   ctx.reply('–û—à–∏–±–∫–∞! –£ –≤–∞—Å –Ω–µ—Ç USDT –¥–ª—è –≤—ã–≤–æ–¥–∞. ')
    // } else {

      // ctx.reply(`–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å USDT –≤ —Å–µ—Ç–∏ TRC20:`)  
    // }
     
     

    // await printTickets(bot, user, ctx, nextId);
  });


  bot.action('gethelp', async (ctx) => {
    const user = await getUser(bot.instanceName, ctx.update.callback_query.from.id);
    
    // const min = `${(2 / parseFloat(1)).toFixed(0)} USDT`;
    // const max = `${((parseFloat(liquidBal) * parseFloat(1)) / parseFloat(1)).toFixed(0)} USDT`;

    // if (parseFloat(max) >= parseFloat(min)) ctx.reply(`–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É!\n\n –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –æ—Ç ${min} –¥–æ ${max} —Ü–∏—Ñ—Ä–∞–º–∏.`); // , Markup.inlineKeyboard(buttons, {columns: 1}).resize()
    // else {
    //   ctx.reply(`–û—à–∏–±–∫–∞!. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: ${min}, –Ω–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ: ${max}. `); // , Markup.inlineKeyboard(buttons, {columns: 1}).resize()
    // }

  });

  return null;
};
