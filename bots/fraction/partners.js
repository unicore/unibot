const { stringify } = require('csv-stringify');
const string2fileStream = require('string-to-file-stream');
const { Markup } = require('telegraf');
const {
  saveUser, getUserHelixBalance, getNicknameByEosName, getTelegramByEosName,
} = require('./db');

const {getAllHelixBalances, getHelixsList} = require('./core')

const { mainButtons } = require('./utils/bot');
const { lazyFetchAllTableInternal } = require('./utils/apiTable');

const { sendMessageToUser } = require('./messages');

async function getPartner(bot, username) {
  const partner = await lazyFetchAllTableInternal(bot.eosapi, 'part', 'part', 'partners2', username, username, 1);

  return partner[0];
}

async function getPromoBudget(bot, username, contract = 'eosio.token') {
  let promo = await lazyFetchAllTableInternal(bot.eosapi, 'part', 'part', 'pbudgets', username, username, 100, 2, 'i64');
  promo = promo.find((el) => el.contract === contract);
  if (promo) return promo.budget;
  return '0.0000 FLOWER';
}

async function hasRequest(bot, username, contract) {
  let request = await lazyFetchAllTableInternal(bot.eosapi, 'part', 'part', 'prequests3', username, username, 100, 2, 'i64');
  request = request.find((r) => r.username === username && r.contract === contract);
  return !!request;
}

function getMyPartners(bot, username) {
  return lazyFetchAllTableInternal(bot.eosapi, 'part', 'part', 'partners2', username, username, 1000, 2, 'i64');
}

async function loadStructure(bot, partnerBase, level) {
  
  const partners = [];
  console.log("level:" , level)
  const line = await getMyPartners(bot, partnerBase);
  // eslint-disable-next-line no-restricted-syntax
  for (const row of line) {
    // eslint-disable-next-line no-await-in-loop
    row.partners = await loadStructure(bot, row.username, level + 1);
    row.level = level
    partners.push(row);
  }

  const str = [];

  partners.forEach((partner) => {
    str.push(partner);
    if (partner.partners && partner.partners.length > 0) {
      // eslint-disable-next-line no-restricted-syntax
      for (const row of partner.partners) {
        if (row.username) {
          row.username = `+${row.username}`;
          if (!row.level) row.level = level

          // row.level = level
          str.push(row);
        }
      }
    }
  });
  return str;
}

async function getStructure(bot, baseUsername, hosts) {
 
  const structure = await loadStructure(bot, baseUsername, 1);

  const newStr = [];

  let k = 1;
  let balances = []
  
  for (host of hosts) {
    console.log("HOST.username: ", host)
    let balances2 = await lazyFetchAllTableInternal(bot.eosapi, 'unicore', host.username, 'balance4');
    balances = balances.concat(balances2)
  }

  console.log("BALANCES: ", balances)
  
  // eslint-disable-next-line no-restricted-syntax
  for (const row of structure) {
    if (row.username) {
      const regex = /([a-z]+)/gi;

      const reg = regex.exec(row.username);

      const username = reg[1];

      if (username) {
        // eslint-disable-next-line no-await-in-loop
        const [nickname, telegram] = await Promise.all([
          // getUserHelixBalance(username),
          getNicknameByEosName(bot.instanceName, username),
          getTelegramByEosName(bot.instanceName, username),
        ]);

        let totalWhite = '0.0000 FLOWER';
        let totalBlack = '0.0000 FLOWER';
        let total = '0.0000 FLOWER'

        if (balances) {
          // eslint-disable-next-line no-restricted-syntax
          let user_balances = balances.filter(el => el.owner == username)

          for (const bal of user_balances) {
            total = (parseFloat(total) + parseFloat(bal.compensator_amount)).toFixed(4) + ' FLOWER'
            // if (bal.pool_color === 'white') totalWhite = `${parseFloat(totalWhite) + parseFloat(bal.available)} FLOWER`;
            // else totalBlack = `${parseFloat(totalBlack) + parseFloat(bal.available)} FLOWER`;
          }
        }
        
        newStr.push({
          '#': k,
          '–°–∏—Å—Ç–µ–º–Ω–æ–µ –∏–º—è': row.username,
          –£—Ä–æ–≤–µ–Ω—å: row.level,
          –ù–∏–∫–Ω–µ–π–º: nickname,
          –¢–µ–ª–µ–≥—Ä–∞–º: telegram,
          –§—Ä–∞–∫—Ü–∏–∏: total.replace('FLOWER', 'FLOWER')
          // '–ù–∞ –±–µ–ª—ã—Ö —Å—Ç–æ–ª–∞—Ö': totalWhite,
          // '–ù–∞ —á—ë—Ä–Ω—ã—Ö —Å—Ç–æ–ª–∞—Ö': totalBlack,
        });

        k += 1;
      }
    }
  }

  if (newStr.length === 0) {
    newStr.push({
      '#': 0,
      '–°–∏—Å—Ç–µ–º–Ω–æ–µ –∏–º—è': '–ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ –Ω–µ—Ç',
      –£—Ä–æ–≤–µ–Ω—å: '-',
      –ù–∏–∫–Ω–µ–π–º: '-',
      –¢–µ–ª–µ–≥—Ä–∞–º: '-',
      '–§—Ä–∞–∫—Ü–∏–∏': '-',
      // '–ù–∞ –±–µ–ª—ã—Ö —Å—Ç–æ–ª–∞—Ö': '-',
      // '–ù–∞ —á—ë—Ä–Ω—ã—Ö —Å—Ç–æ–ª–∞—Ö': '-',
    });
  }
  return newStr;
}

async function sendStructureFileToUser(bot, user, data) {
  stringify(data, {
    header: true,
  }, (err, output) => {
    const toSend = string2fileStream(output);
    sendMessageToUser(bot, user, { doc: toSend }, { filename: 'my-partners.csv' });
  });
}

async function printPartners(bot, ctx, user) {
  const me = await getPartner(bot, user.eosname);
  const ref = await getNicknameByEosName(bot.instanceName, me.referer) || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω';
  const telegram = await getTelegramByEosName(bot.instanceName, me.referer);
  // const promoBudget = await getPromoBudget(bot, user.eosname);

  // eslint-disable-next-line no-param-reassign
  // user.promo_budget = parseFloat(promoBudget);

  if (!user.ref_count)
    user.ref_count = 0

  const buttons = [];
  
  // buttons.push(Markup.button.callback('–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–π –±—é–¥–∂–µ—Ç', 'startpromotion'));
  // let text2 = `–í –≤–∞—à–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ: ${user.ref_count} –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤`
  let text = `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥—ë—Ç –ø–æ–¥—Å—á–µ—Ç..`

  let message_id = await sendMessageToUser(bot, user, { text: text });//, Markup.inlineKeyboard(buttons, { columns: 1 }).resize()
  let hosts =  await lazyFetchAllTableInternal(bot.eosapi, 'unicore', bot.getEnv().CORE_HOST, 'ahosts');

  await getStructure(bot, user.eosname, hosts).then(async (structure) => {
    // console.log(structure)
    
    console.log("user.ref_count: ", user.ref_count)
    
    user.ref_count = structure.length
    console.log("structure: ", structure)
    console.log("structure.length: ", structure.length)
    let text1 = `–í–∞—à —Å—Ç–∞—Ä—à–∏–π –ø–∞—Ä—Ç–Ω—ë—Ä: ${me.referer.toUpperCase()}\n\t\t\t–ò–º—è: ${ref}\n\t\t\t–¢–µ–ª–µ–≥—Ä–∞–º: ${telegram}`
    
    let text3 = `\n\n–í –≤–∞—à–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ ${structure.length == 1 && structure[0]['–°–∏—Å—Ç–µ–º–Ω–æ–µ –∏–º—è'] == '–ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ –Ω–µ—Ç'? '–Ω–µ—Ç' : structure.length} —Ñ—Ä–∞–∫—Ü–∏–æ–Ω–µ—Ä–æ–≤`

    let l1 = structure.filter(row => row["–£—Ä–æ–≤–µ–Ω—å"] == 1)
    let l2 = structure.filter(row => row["–£—Ä–æ–≤–µ–Ω—å"] == 2)
    let l3 = structure.filter(row => row["–£—Ä–æ–≤–µ–Ω—å"] == 3)
    let l4 = structure.filter(row => row["–£—Ä–æ–≤–µ–Ω—å"] == 4)
    let l5 = structure.filter(row => row["–£—Ä–æ–≤–µ–Ω—å"] == 5)
    let l6 = structure.filter(row => row["–£—Ä–æ–≤–µ–Ω—å"] == 6)
    let l7 = structure.filter(row => row["–£—Ä–æ–≤–µ–Ω—å"] == 7)


    console.log("L1", l1)

    if(l1.length > 0)
      text3 += `\n\t\t\t—É—Ä–æ–≤–µ–Ω—å 1: ${l1.length}`
    if(l2.length > 0)
      text3 += `\n\t\t\t—É—Ä–æ–≤–µ–Ω—å 2: ${l2.length}`
    if(l3.length > 0)
      text3 += `\n\t\t\t—É—Ä–æ–≤–µ–Ω—å 3: ${l3.length}`
    if(l4.length > 0)
      text3 += `\n\t\t\t—É—Ä–æ–≤–µ–Ω—å 4: ${l4.length}`
    if(l5.length > 0)
      text3 += `\n\t\t\t—É—Ä–æ–≤–µ–Ω—å 5: ${l5.length}`
    if(l6.length > 0)
      text3 += `\n\t\t\t—É—Ä–æ–≤–µ–Ω—å 6: ${l6.length}`
    if(l7.length > 0)
      text3 += `\n\t\t\t—É—Ä–æ–≤–µ–Ω—å 7: ${l7.length}`
    
    text3 += `\n\n–î–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —Ñ—Ä–∞–∫—Ü–∏–æ–Ω–µ—Ä–æ–≤ –≤ –≤–∞—à—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É –∏–∑ –∫–æ—à–µ–ª—å–∫–∞.`

    await ctx.deleteMessage(message_id)
    await sendMessageToUser(bot, user, { text: text1 + text3 });//, Markup.inlineKeyboard(buttons, { columns: 1 }).resize()
    await saveUser(bot.instanceName, user);
  

    await sendStructureFileToUser(bot, user, structure);
    
  }).catch(e => {
    ctx.reply(`–û—à–∏–±–∫–∞ –Ω–∞ –ø–æ–¥—Å—á—ë—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º: ${e.message}`)
  })
}

async function addPromoBudgetAction(bot, ctx, user, budget) {
  const eos = await bot.uni.getEosPassInstance(user.wif);

  await eos.transact({
    actions: [{
      account: 'eosio.token',
      name: 'transfer',
      authorization: [{
        actor: user.eosname,
        permission: 'active',
      }],
      data: {
        from: user.eosname,
        to: 'part',
        quantity: budget,
        memo: '',
      },
    }],
  }, {
    blocksBehind: 3,
    expireSeconds: 30,
  });

  // eslint-disable-next-line no-param-reassign
  user.promo_budget = parseFloat(budget);
  await saveUser(bot.instanceName, user);
  await ctx.editMessageText(user, { text: '–°–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–π –±—é–¥–∂–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω' });
  await printPartners(bot, ctx, user);
}

async function continueDemo(bot, user, from) {
  // TODO set menu
  let text = '';
  let menu;
  if (from === 'eosio') {
    text += '–í—ã –ø–æ–ª—É—á–∏–ª–∏ 1000 –¥–µ–º–æ-—Ü–≤–µ—Ç–∫–æ–≤! üåº –î–∞–≤–∞–π—Ç–µ —Å –∏—Ö –ø–æ–º–æ—â—å—é –∑–∞—Ä–∞–±–æ—Ç–∞–µ–º –µ—â–µ —Ü–≤–µ—Ç–∫–æ–≤, –∏ —Å–æ—Ç–≤–æ—Ä–∏–º –¥–æ–±—Ä–æ. üíµ';
    text += '\n\n–í–∞—à–∞ –∑–∞–¥–∞—á–∞ - –ø–æ–ª–æ–∂–∏—Ç—å üåº —Ü–≤–µ—Ç–∫–∏ –Ω–∞ —Å—Ç–æ–ª –∏ –∑–∞–±—Ä–∞—Ç—å –∏—Ö —Å –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç–æ–ª–æ–≤ —Å –ø—Ä–∏–±—ã–ª—å—é.';
    text += '\n\n–°—Ç–æ–ª—ã –æ—Ç–∫—Ä—ã–≤–∞—é—Ç—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –ø–æ—Å–ª–µ –∏—Ö –ø–æ–ª–Ω–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≤–∑–Ω–æ—Å–∞–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: —Å–Ω–∞—á–∞–ª–∞ ‚ö™Ô∏è –±–µ–ª—ã–π, –∑–∞—Ç–µ–º ‚ö´Ô∏è —á—ë—Ä–Ω—ã–π, –∑–∞—Ç–µ–º –≤–Ω–æ–≤—å ‚ö™Ô∏è –±–µ–ª—ã–π, –∑–∞ –Ω–∏–º - ‚ö´Ô∏è —á—ë—Ä–Ω—ã–π, –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ..';
    text += '\n\n\t\t\t- –ï—Å–ª–∏ –ø–æ–ª–æ–∂–∏—Ç–µ üåº —Ü–≤–µ—Ç–∫–∏ –Ω–∞ ‚ö™Ô∏è –±–µ–ª—ã–π —Å—Ç–æ–ª - —Ç–æ —Å–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ ‚ö™Ô∏è –±–µ–ª–æ–≥–æ —Å—Ç–æ–ª–∞ –∑–∞–±–µ—Ä—ë—Ç–µ –∏—Ö —Å –ø—Ä–∏–±—ã–ª—å—é +100%. ';
    text += '\n\n\t\t\t- –ï—Å–ª–∏ –ø–æ–ª–æ–∂–∏—Ç–µ üåº —Ü–≤–µ—Ç–∫–∏ –Ω–∞ ‚ö´Ô∏è —á—ë—Ä–Ω—ã–π —Å—Ç–æ–ª - —Ç–æ —Å–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ ‚ö´Ô∏è —á—ë—Ä–Ω–æ–≥–æ —Å—Ç–æ–ª–∞ –∑–∞–±–µ—Ä—ë—Ç–µ –∏—Ö —Å –ø—Ä–∏–±—ã–ª—å—é +100%. ';
    text += '\n\n\t\t\t- –ö–ª–∞—Å—Ç—å —Ü–≤–µ—Ç–∫–∏ –∏ –∑–∞–±–∏—Ä–∞—Ç—å –∏—Ö –º–æ–∂–Ω–æ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç —Å –ª—é–±–æ–≥–æ —Å—Ç–æ–ª–∞ ‚ö™Ô∏èüåº‚ö´Ô∏è';
    text += '\n\n\t\t\t- –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π –ø–æ—Å–ª–µ–¥—É—é—â–∏–π —Å—Ç–æ–ª, –ø–æ—Å–ª–µ –≤–∞—à–µ–≥–æ –≤–∑–Ω–æ—Å–∞, –Ω–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—Å—è –∑–∞ —Å—É—Ç–∫–∏ üïê - –≤—ã —Å–æ—Ç–≤–æ—Ä–∏—Ç–µ –¥–æ–±—Ä–æ –Ω–∞ -50%, –≤–µ—Ä–Ω—É–≤ —Ç–æ–ª—å–∫–æ –ø–æ–ª–æ–≤–∏–Ω—É —Å–≤–æ–∏—Ö —Ü–≤–µ—Ç–∫–æ–≤.';

    text += '\n\n–£–¥–∞—á–∏! üçÄ –ó–¥–µ—Å—å –≤—Å—ë –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–Ω–∏–º–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∞ –¥–æ–±—Ä–æ –∑–¥–µ—Å—å –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è.';
    menu = Markup
      .keyboard(['–ù–∞—á–∞—Ç—å'], { columns: 2 }).resize();
  } else {
    text = '–í–∞—à —Å–ø–æ–Ω—Å–æ—Ä –ø–æ–¥–∞—Ä–∏–ª –≤–∞–º –Ω–∞—Å—Ç–æ—è—â–∏–π —Ü–≤–µ—Ç–æ–∫! üåº –¢–≤–æ—Ä–∏—Ç–µ –¥–æ–±—Ä–æ –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ!';
    menu = Markup
      .keyboard(mainButtons, { columns: 2 }).resize();
  }

  await sendMessageToUser(bot, user, { text }, menu);
}

async function requestPromoBudgetAction(bot, user, from) {
  const eos = await bot.uni.getEosPassInstance(user.wif);

  try {
    await eos.transact({
      actions: [{
        account: 'part',
        name: 'request',
        authorization: [{
          actor: user.eosname,
          permission: 'active',
        }],
        data: {
          to: user.eosname,
          from,
        },
      }],
    }, {
      blocksBehind: 3,
      expireSeconds: 30,
    });
    await continueDemo(bot, user, from);
  } catch (e) {
    await sendMessageToUser(bot, user, { text: `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ –¥–∞—Ä–µ–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º: ${e.message}` });
    await continueDemo(bot, user, from);
    console.error(e);
  }
}

async function prepareSpreadAction(bot, user, ctx) {
  const structure = await loadStructure(bot, user.eosname, 1);

  const regex = /([a-z]+)/gi;
  const nullUsers = structure.filter((u) => parseFloat(u['–õ–∏–∫–≤–∏–¥–Ω—ã–µ —Ü–≤–µ—Ç–∫–∏']) === 0 && parseFloat(u['–ù–∞ –±–µ–ª—ã—Ö —Å—Ç–æ–ª–∞—Ö'] === 0 && parseFloat(u['–ù–∞ —á—ë—Ä–Ω—ã—Ö —Å—Ç–æ–ª–∞—Ö']))).map((u) => {
    const username = regex.exec(u.username)[1];

    return { ...u, username };
  });

  const myPromoBalance = await getPromoBudget(bot, user.eosname);

  if (nullUsers.length > 0) {
    const buttons = [];

    buttons.push(Markup.button.callback('–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', 'startspread'));
    buttons.push(Markup.button.callback('–æ—Ç–º–µ–Ω–∞', 'backto wallet '));

    ctx.reply(`–í–∞—à —Ä–µ–∫–ª–∞–º–Ω—ã–π –±—é–¥–∂–µ—Ç: ${myPromoBalance}. –í –≤–∞—à–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ ${nullUsers.length} –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤, –Ω–µ –æ–±–ª–∞–¥–∞—é—â–∏–º–∏ –±–∞–ª–∞–Ω—Å–∞–º–∏. –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ 1 FLOWER –¥–ª—è –Ω–∏—Ö –∏–∑ –≤–∞—à–µ–≥–æ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç–∞ –Ω–∞ –∫–∞–∂–¥–æ–≥–æ –∏–∑ –Ω–∏—Ö?`, Markup.inlineKeyboard(buttons, { columns: 1 }).resize());
  } else {
    ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è');
  }
}

async function spreadNowAction(ctx) {
  const buttons = [];
  buttons.push(Markup.button.callback('–û—Ç–º–µ–Ω–∏—Ç—å ', 'startspread'));

  ctx.reply('–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ 1 FLOWER –ø–æ –≤—Å–µ–º –ø–∞—Ä—Ç–Ω—ë—Ä–∞–º, –Ω–µ –æ–±–ª–∞–¥–∞—é—â–∏—Ö –ª–∏–∫–≤–∏–¥–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º?', Markup.inlineKeyboard(buttons, { columns: 1 }).resize());
}

module.exports = {
  printPartners,
  getPartner,
  prepareSpreadAction,
  spreadNowAction,
  addPromoBudgetAction,
  getPromoBudget,
  hasRequest,
  requestPromoBudgetAction,
  continueDemo,
};
