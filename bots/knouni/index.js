const { Markup } = require('telegraf');
const axios = require('axios');
const { ChainsSingleton, generateAccount: generateUniAccount } = require('unicore');
const EosApi = require('eosjs-api');

const { restoreAccount } = require('./restore');
const {
  mainButtons, backToMainMenu, demoButtons,
} = require('./utils/bot');

const {getAIAnswer} = require('./ai.js')

const PayForStatus = 3 //FLOWER


const {
  getHelixParams,
  getUserHelixBalances,
  printHelixWallet,
  transferAction,
  getLiquidBalance,
  getOneUserHelixBalance,
  printWallet,
  printUserBalances,
  withdrawAction,
  printHelixs,
  priorityAction,
  massWithdrawAction,
  printTail,
  getCurrentUserDeposit,
  getCondition,
  exitFromTail,
  getPartnerStatus
} = require('./core');

const { sendMessageToUser, sendMessageToAll } = require('./messages');
const {
  printPartners,
  prepareSpreadAction,
  addPromoBudgetAction,
  getPromoBudget,
  hasRequest,
  requestPromoBudgetAction,
  getPartner,
  continueDemo,
} = require('./partners');

const {
  delOrder,
  getMyOrders,
  cancelOrder,
  acceptBuyOrder,
  confirmActiveBuyOrder,
  approveActiveBuyOrder,
  createOrder,
  setDetails,
  getDetails,
  getChildOrders,
} = require('./p2p');

const {
  generateTaskOutput,
  printTasks,
} = require('./tasks');

const {
  printGoalsMenu,
  voteAction,
  createGoal,
  burnNow,
} = require('./goals');

const {
  sellSharesAction,
  printExpirience,
} = require('./shares');

const education = require('./education');

const {
  getUser,
  saveUser,
  addUserHelixBalance,
  delUserHelixBalance,
  getQuiz,
  saveQuiz,
  insertMessage,
  getMessage,
  getUserByResumeChannelId,
  insertRequest,
  closeRequest,
} = require('./db');

const { getDecodedParams } = require('./utils/utm');
const { parseTokenString } = require('./utils/tokens');

async function generateAccount(bot, ctx, isAdminUser, ref, userext) {
  const user = userext || ctx.update.message.from;

  const generatedAccount = await generateUniAccount();

  user.eosname = generatedAccount.name;
  user.mnemonic = generatedAccount.mnemonic;
  user.wif = generatedAccount.wif;
  user.pub = generatedAccount.pub;
  user.is_admin = isAdminUser;
  user.ref = ref;

  if (!user.ref) user.ref = '';

  const params = {
    tg_id: user.id,
    username: user.eosname,
    active_pub: user.pub,
    owner_pub: user.pub,
    locale: 'ru',
    referer: user.ref, // referer
    callback: 'tg.me',
    type: 'guest',
    meta: {},
  };

  console.log('referer on register: ', params.referer, 'username: ', generatedAccount.name, 'ref: ', ref);
  try {
    const message = await axios.get(
      `${bot.getEnv().REGISTRATOR}/set`,
      {
        params,
      },
    );
    if (message.data) {
      // TODO set partner info
      await saveUser(bot.instanceName, user);
    } else {
      await saveUser(bot.instanceName, user);
      console.error(message);
      ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', Markup.removeKeyboard());
    }
  } catch (e) {
    await saveUser(bot.instanceName, user);
    return user.eosname;
  }

  return user.eosname;
}

async function isAdmin(bot, id) {
  return Number(id) === Number(bot.getEnv().ADMIN_ID);
}

async function checkForExistBCAccount(bot, ctx) {
  const user = ctx.update.message.from.id;
  const exist = await getUser(bot.instanceName, user);

  if (!exist || !exist.eosname) {
    await generateAccount(bot, ctx, false, '');
    return true;
  }

  return true;
}

const quizDefinition = [
  { message: 'Contants' },
  // { message: '–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?' },
  // { message: '–ò–∑ –∫–∞–∫–æ–≥–æ –≤—ã –≥–æ—Ä–æ–¥–∞?' },
  // { message: '–ö–∞–∫–∞—è –≤–∞—à–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è?'},
  // { message: '–í —á—ë–º —Ö–æ—Ç–µ–ª–∏ –±—ã —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è?' },
  // { message: '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ, –∏ –ø–æ—á–µ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–∞—Ç—å —Å –ò–Ω—Å—Ç–∏—Ç—É—Ç–æ–º?' },
];

async function catchRequest(bot, user, ctx, text) {
  const reply = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.. –ú–Ω–µ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑—É–º–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞. –Ø —Å—Ä–∞–∑—É —Å–≤—è–∂—É—Å—å —Å –≤–∞–º–∏, –∫–æ–≥–¥–∞ –æ—Ç–≤–µ—Ç –±—É–¥–µ—Ç –Ω–∞–π–¥–µ–Ω!\n\n–ê –ø–æ–∫–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å: \n- /news - –∑–∞–ø—Ä–æ—Å—ã –ª—é–¥–µ–π –∏ –º–æ–∏ –æ—Ç–≤–µ—Ç—ã\n- /wallet - –≤–∞—à –∫–æ—à–µ–ª—ë–∫';
  // const menu = Markup.keyboard(['üèÅ –∑–∞–∫—Ä—ã—Ç—å –∑–∞–ø—Ä–æ—Å'], { columns: 2 }).resize(); // , 'ü™ô –∫–æ—à–µ–ª—ë–∫'

  await sendMessageToUser(bot, user, { text: reply });//, menu

  // const id = await sendMessageToUser(bot, { id: bot.getEnv().CV_CHANNEL }, { text });
  let id 
  if (ctx.update.message.photo || ctx.update.message.caption) { id = await sendMessageToUser(bot, { id:  bot.getEnv().CV_CHANNEL }, ctx.update.message, { caption: ctx.update.message.caption }); } else { id = await sendMessageToUser(bot, { id:  bot.getEnv().CV_CHANNEL }, { text }); }


  await insertMessage(bot.instanceName, user, bot.getEnv().CV_CHANNEL, text, id, 'CV');

  user.state = 'chat';
  user.request_channel_id = id;

  // if (!user.eosname) {
  //   user.eosname = await generateAccount(bot, ctx, false, user.ref);
  // }

  await saveUser(bot.instanceName, user);

  await insertRequest(bot.instanceName, user, id, text);
  
  //TODO AI

}

module.exports.init = async (botModel, bot) => {
  const protocol = bot.getEnv().PROTOCOL.replace('://', '');
  let host = String(bot.getEnv().ENDPOINT);

  let port = protocol === 'https' ? 443 : 80;

  if (host.includes(':')) {
    [host, port] = host.split(':');
    port = Number(port);
  }

  const config = {
    chains: [
      {
        name: 'FLOWER',
        rpcEndpoints: [
          {
            protocol,
            host,
            port,
          },
        ],
        explorerApiUrl: 'https://explorer.samplesite.com',
      },
    ],
    ual: {
      rootChain: 'FLOWER',
    },
    tableCodeConfig: {
      core: 'unicore',
      staker: 'staker',
      p2p: 'p2p',
      reg: 'registrator',
      part: 'part',
    },
  };

  const instance = new ChainsSingleton();
  instance.init(config);

  bot.uni = instance.getRootChain();

  const options = {
    httpEndpoint: bot.getEnv().PROTOCOL + bot.getEnv().ENDPOINT,
    verbose: false, // API logging
    sign: true,
    logger: {
      // Default logging functions
    },
    fetchConfiguration: {},
  };

  bot.eosapi = EosApi(options);

  bot.start(async (ctx) => {
    ctx.update.message.from.params = getDecodedParams(ctx.update.message.text);

    const ref = await ctx.update.message.text.split('/start ')[1] || null;
    let msg2;
    console.log("REFERER:", ref)
    if (ctx.update.message.chat.type === 'private') {
      if (!ctx.update.message.from.is_bot) {
        let user = await getUser(bot.instanceName, ctx.update.message.from.id);

        if (!user) {
          user = ctx.update.message.from;
          user.app = bot.getEnv().APP;
          user.ref = ref;
          user.requests_count = 3;

          // try{
            user.eosname = await generateAccount(bot, ctx, false, user.ref);
          // } catch(e){
            // ctx.reply('')
          // }
          await saveUser(bot.instanceName, user);
        } else {
          console.log("on else")
          user.request_chat_id = false;
          user.request_channel_id = false;
          if (!user.requests_count)
            user.requests_count = 3;

          if (!user.eosname) {
            user.eosname = await generateAccount(bot, ctx, false, user.ref);
          }

          await saveUser(bot.instanceName, user);
        }

        // const request = Markup.keyboard(['üÜï c–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å'], { columns: 1 }).resize();
        const buttons = [];

        if (user.requests_count > 0) {
          const clearMenu = Markup.removeKeyboard();
          // buttons.push(Markup.button.callback('üîÑ –∫—É–ø–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é', 'buystatus ${json.stringify({})}'));


          const id = await sendMessageToUser(bot, { id: user.id }, {   video: {
                duration: 5,
                width: 1920,
                height: 1080,
                file_name: '–ü–ü.mp4',
                mime_type: 'video/mp4',
                thumb: {
                  file_id: 'AAMCAgADGQEAAhKkY4-c1qW95qGFk_IfDq9nAAEz_MXUAAKaJwACk2aBSJjUQK2_Wr7-AQAHbQADKwQ',
                  file_unique_id: 'AQADmicAApNmgUhy',
                  file_size: 5044,
                  width: 320,
                  height: 180
                },
                file_id: 'BAACAgIAAxkBAAISpGOPnNalveahhZPyHw6vZwABM_zF1AACmicAApNmgUiY1ECtv1q-_isE',
                file_unique_id: 'AgADmicAApNmgUg',
                file_size: 4252145
            }}, clearMenu);
            
          let welcome_text = '–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –∫–∞—Ä–º–∞–Ω–Ω—ã–π AI –¥–ª—è —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è –ø–æ –∂–∏–∑–Ω–∏. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ª—é–±–æ–π –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–ª—É—á–∏—Ç–µ —Ä–∞–∑—É–º–Ω—ã–π —Å–æ–≤–µ—Ç.\n\n–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤: '
          welcome_text += `\nüü¢ –ü—Ä–µ–¥–ª–æ–∂–∏ 10 –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã—Ö –∏–¥–µ–π –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è 10-–ª–µ—Ç–Ω–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞`
          welcome_text += `\nüü¢ –û–±—ä—è—Å–Ω–∏ –∫–≤–∞–Ω—Ç–æ–≤—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏`
          // welcome_text += `\nüü¢ –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å HTTP-–∑–∞–ø—Ä–æ—Å –≤ Javascript?;`
          welcome_text += `\nüü¢ –ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –º–∏–ª–ª–∏–æ–Ω?`
          welcome_text += `\nüü¢ –ü–æ—Å–æ–≤–µ—Ç—É–π —Ñ–∏–ª—å–º`
          
          welcome_text += `\n\n–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:`
          welcome_text += `\nüî¥ –ú–æ–≥—É –∏–Ω–æ–≥–¥–∞ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–≤–µ—Ä–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é`;
          welcome_text += `\nüî¥ –ú–æ–≥—É –∏–Ω–æ–≥–¥–∞ —Å–æ–∑–¥–∞–≤–∞—Ç—å –≤—Ä–µ–¥–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏–ª–∏ –ø—Ä–µ–¥–≤–∑—è—Ç—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç`;
          // welcome_text += `\nüî¥ –ú–æ–≥—É –∏–Ω–æ–≥–¥–∞ —Ä—É–≥–∞—Ç—å—Å—è –º–∞—Ç–æ–º`;
          welcome_text += `\nüî¥ –£ –º–µ–Ω—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è –º–∏—Ä–∞ –∏ —Å–æ–±—ã—Ç–∏–π –ø–æ—Å–ª–µ 2021 –≥–æ–¥–∞`;



          // welcome_text += `\nüîò `
          // welcome_text += `–ü–æ—Å–æ–≤–µ—Ç—É–π —Ñ–∏–ª—å–º`

          await ctx.reply(welcome_text, clearMenu, { reply_markup: { remove_keyboard: true } });
          


          await addRequestAction(bot, user, ctx)
          // await ctx.reply('> –ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:', request);
          // buttons.push(Markup.button.callback('üÜï c–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å', 'createrequest'));
          // await ctx.reply('–ú–æ–π –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –ø–æ–º–æ–≥–∞–µ—Ç –ø—Ä–∏–Ω—è—Ç—å —Ä–µ—à–µ–Ω–∏–µ –≤ —Å–ª–æ–∂–Ω–æ–π –∂–∏–∑–Ω–µ–Ω–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ! –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é, —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–æ–ø—Ä–æ—Å, –∏ –ø–æ–ª—É—á–∏—Ç–µ —Ä–∞–∑—É–º–Ω—ã–π –æ—Ç–≤–µ—Ç: ', Markup.inlineKeyboard(buttons, { columns: 1 }).resize());
        } else {
          const clearMenu = Markup.removeKeyboard();
          buttons.push(Markup.button.callback('üîÑ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', `buystatus ${JSON.stringify({})}`));

          // await ctx.reply('–ú–µ–Ω—è –∑–æ–≤—É—Ç –ö–Ω–æ, —è –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ üßôüèª‚Äç‚ôÇÔ∏è', clearMenu, { reply_markup: { remove_keyboard: true } });
          // await ctx.reply('–ú–æ–π –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –ø–æ–º–æ–≥–∞–µ—Ç –ø—Ä–∏–Ω—è—Ç—å —Ä–µ—à–µ–Ω–∏–µ –≤ —Å–ª–æ–∂–Ω–æ–π –∂–∏–∑–Ω–µ–Ω–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏.');
          await ctx.reply('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤–µ—Ç–æ–≤. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–≤–µ—Ç–æ–≤ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –º–µ–Ω—è –≤—Å–µ–≥–æ –∑–∞ 189 —Ä—É–±–ª–µ–π –≤ –º–µ—Å—è—Ü:', Markup.inlineKeyboard(buttons, { columns: 1 }).resize());
        }
      }
    } else {
      const clearMenu = Markup.removeKeyboard();
      await ctx.reply('—è –∑–¥–µ—Å—å!', clearMenu, { reply_markup: { remove_keyboard: true } });
    }
  });

  async function addRequestAction(bot, user, ctx) {
    ctx.reply('> –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å:');
    user.state = 'newrequest';
    await saveUser(bot.instanceName, user);
  }

 bot.action('deposit', async (ctx) => {
    const user = await getUser(bot.instanceName, ctx.update.callback_query.from.id);
    // await ctx.deleteMessage();
    // console.log("–∫—É–ø–∏—Ç—å –±–∏–ª–µ—Ç")
    // await setBuyMenu(ctx)
    // await buyTicket(bot, user, ctx, 'USDT.TRC20');
  });

  async function buyTicket(bot, user, ctx, currency, json) {
    await ctx.deleteMessage()

    try {
      const params = {
        username: user.eosname,
        currency,
        type: 'subscribe',
        hostname: bot.getEnv().CORE_HOST,
        botName: bot.instanceName,
        meta: json
      };
      const path = `${bot.getEnv().PAY_GATEWAY}/generate`;

      const result = await axios.post(
        path,
        params,
      );
      
      // await ctx.reply(`–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ–Ω—è - –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ! –í—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–æ–≤–µ—Ç–Ω–∏–∫–∞ –ø–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –≤—Å–µ–≥–æ –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–æ–ª–ª–∞—Ä–æ–≤ –≤ –º–µ—Å—è—Ü.`)

      if (result.data.status === 'ok') {
        await ctx.replyWithHTML(`–í –∫–∞—á–µ—Å—Ç–≤–µ –æ–ø–ª–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ USDT (TRC-20). –ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ <a href="https://dacom.io/60279ba5d0454f5cac5f4c782d412988">–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é</a> –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ${parseFloat(json.cost).toFixed(4)} USDT –Ω–∞ –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å:`, { disable_web_page_preview: true });
        await ctx.reply(`${result.data.address}`);
      } else {
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ');
        console.log(result.data);
      }
    } catch (e) {
      console.log(e);
      ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. ');
    }
  }

  bot.command('news', async (ctx) => {

    await ctx.replyWithHTML(`–ö–∞–Ω–∞–ª –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –º–æ–∏—Ö —Å–æ–≤–µ—Ç–æ–≤: ${bot.getEnv().CV_CHANNEL_LINK}`);  
  });

  bot.command('close', async (ctx) => {
    const user = await getUser(bot.instanceName, ctx.update.message.from.id);
    const isAdminUser = isAdmin(bot, user.id);
    
    if (isAdminUser && ctx.update.message.reply_to_message) { // –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —á—å–µ-—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const msg = await getMessage(bot.instanceName, ctx.update.message.reply_to_message.forward_from_message_id || ctx.update.message.reply_to_message.message_id, bot.getEnv().CV_CHANNEL);
      
      if (msg.id) {
        const question_owner = await getUser(bot.instanceName, msg.id);
        const status = await getPartnerStatus(bot, "core", question_owner.eosname)
        
        if (question_owner) {

          question_owner.state = "newrequest";
          question_owner.request_chat_id = false;

          question_owner.requests_count -= 1;
          await saveUser(bot.instanceName, question_owner)
          let text = `–í–∞—à –∑–∞–ø—Ä–æ—Å –∑–∞–∫—Ä—ã—Ç. `

          if (status.level == -1){
            if (question_owner.requests_count > 0)
              text += `–°–æ–≤–µ—Ç–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å: ${question_owner.requests_count}.\n\n–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –≤—Å–µ–≥–æ –∑–∞ 3 USDT –≤ –º–µ—Å—è—Ü –∏ –ø–æ–ª—É—á–∏—Ç–µ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–µ—Ç–æ–≤.`
            else text += `–£ –≤–∞—Å –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤–µ—Ç–æ–≤.\n\n–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –≤—Å–µ–≥–æ –∑–∞ 3 USDT –≤ –º–µ—Å—è—Ü –∏ –ø–æ–ª—É—á–∏—Ç–µ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–µ—Ç–æ–≤.`
          } 

          console.log("on send")
          let extra = {}
          const buttons = [];
    
          if (status.level < 1) {
            buttons.push(Markup.button.callback('üîÑ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', `buystatus ${JSON.stringify({})}`));
            extra = Markup.inlineKeyboard(buttons, { columns: 1 }).resize()
          } 

          await sendMessageToUser(bot, { id: msg.id }, { text }, extra);
          
          
          if (question_owner.requests_count > 0)
            await sendMessageToUser(bot, { id: msg.id }, { text: '> –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å:' });
          
          // await ctx.deleteMessage(ctx.update.message.message_id)

          await ctx.reply(`–ó–∞–ø—Ä–æ—Å –∑–∞–∫—Ä—ã—Ç`, { reply_to_message_id: ctx.update.message.message_id })

        } else {
          ctx.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω`,{ reply_to_message_id: ctx.update.message.message_id })
        }
        
      }

    }
  });


  function getStatusByNumber(number) {
    let status;
    let status2;
    if (number == 1) {
      status = 'adviser';
      status2 = 'üê® —Å–æ–≤–µ—Ç–Ω–∏–∫';
    } else if (number == 2) {
      status = 'assistant';
      status2 = 'üêº –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç';
    } 

    return { status, status2 };
  }


  bot.action(/buystatus (.+)?/gi, async (ctx) => {
    const user = await getUser(bot.instanceName, ctx.update.callback_query.from.id);
    // console.log('BOT!: ', bot.getEnv())
    const json = JSON.parse(ctx.match[1]);
    // console.log('JSON', json);
    let text = '';
    // text += `–í–∞—à —Å—Ç–∞—Ç—É—Å: –∫–æ—Ç üêà\n`
    const buttons = [];
    
    const status = await getPartnerStatus(bot, bot.getEnv().CORE_HOST, user.eosname)
    

    if (!json.s) {
      // text += '–°—Ç–∞—Ç—É—Å - —ç—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –¥–æ—Ö–æ–¥ –≤–∞—à–∏—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤. –ö–æ–≥–¥–∞ –ø–∞—Ä—Ç–Ω–µ—Ä –ø–æ–ª—É—á–∞–µ—Ç –ø—Ä–∏–±—ã–ª—å, —Ç–æ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ—Ç–µ –ø—Ä–∏–±—ã–ª—å –∏ –≤—ã.\n\n';
      // text += '–≥–æ—Å—Ç—å - —É –≤–∞—Å –µ—Å—Ç—å –≤—Å–µ–≥–æ 3 —Å–æ–≤–µ—Ç–∞\n';
      // text += '–≤–æ–ª–∫ üê∫ - –¥–æ—Ö–æ–¥ –¥–æ 3–≥–æ —É—Ä–æ–≤–Ω—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤\n';
      // text += '—Ç–∏–≥—Ä üêØ - –¥–æ—Ö–æ–¥ –¥–æ 4–≥–æ —É—Ä–æ–≤–Ω—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤\n';
      // text += '–ª–µ–≤ ü¶Å - –¥–æ—Ö–æ–¥ –¥–æ 5–≥–æ —É—Ä–æ–≤–Ω—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤\n';
      // text += '–º–µ–¥–≤–µ–¥—å üêª - –¥–æ—Ö–æ–¥ –¥–æ 6–≥–æ —É—Ä–æ–≤–Ω—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤\n';
      // text += '–¥—Ä–∞–∫–æ–Ω üê≤ - –¥–æ—Ö–æ–¥ —Å–æ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤\n';
      text += `\n${status.level <= 1 ? '‚úÖ' : '‚òëÔ∏è'} <b>–≥–æ—Å—Ç—å</b> - –±–µ—Å–ø–ª–∞—Ç–Ω–æ - 3 —Å–æ–≤–µ—Ç–∞ –ø–æ –ª—é–±—ã–º –∑–∞–ø—Ä–æ—Å–∞–º –≤ –º–µ—Å—è—Ü;`;
      text += `\n${status.level == 2 ? '‚úÖ' : '‚òëÔ∏è'} <b>—Å–æ–≤–µ—Ç–Ω–∏–∫</b> - 3 USDT / –º–µ—Å—è—Ü - –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–µ—Ç–æ–≤ –≤ –º–µ—Å—è—Ü;`;
      // text += '\n‚òëÔ∏è <b>–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç</b> - 100 USDT / –º–µ—Å—è—Ü - —è –≤—ã–ø–æ–ª–Ω—è—é –≤–∞—à–∏ –ø–æ—Ä—É—á–µ–Ω–∏—è;';
      // text += '\n‚òëÔ∏è <b>—ç–∫—Å–ø–µ—Ä—Ç</b> - 1000 USD / –º–µ—Å—è—Ü - —è —Å–æ–±–∏—Ä–∞—é —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π —Å–æ–≤–µ—Ç –∏–∑ –ª—é–¥–µ–π –∏ –º–∞—à–∏–Ω –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞;';
      // text += `\n\n<a href='${bot.getEnv().STATUS_EXPLANATIONS}'>–ø–æ–¥—Ä–æ–±–Ω–µ–µ</a>`
      // buttons.push(Markup.button.callback('–≥–æ—Å—Ç—å', `buystatus ${JSON.stringify({ s: -1, du: 1, di: 1 })}`));
      text += '\n\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞: ';
      
      buttons.push(Markup.button.callback('—Å–æ–≤–µ—Ç–Ω–∏–∫', `buystatus ${JSON.stringify({ s: 1, du: 1, di: 1 })}`));
      // buttons.push(Markup.button.callback('–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç', `buystatusact ${JSON.stringify({ s: 2, du: 1, di: 1 })}`));
      // buttons.push(Markup.button.callback('—ç–∫—Å–ø–µ—Ä—Ç', `buystatus ${JSON.stringify({ s: 3, du: 1, di: 1 })}`));
      // buttons.push(Markup.button.callback('üêØ —Ç–∏–≥—Ä', `buystatus ${JSON.stringify({ s: 4, du: 1, di: 1 })}`));
      // buttons.push(Markup.button.callback('ü¶Å –ª–µ–≤', `buystatus ${JSON.stringify({ s: 5, du: 1, di: 1 })}`));
      // buttons.push(Markup.button.callback('üêª –º–µ–¥–≤–µ–¥—å', `buystatus ${JSON.stringify({ s: 6, du: 1, di: 1 })}`));
      // buttons.push(Markup.button.callback('üê≤ –¥—Ä–∞–∫–æ–Ω', `buystatus ${JSON.stringify({ s: 7, du: 1, di: 1 })}`));
      try{
        await ctx.editMessageText(text, {disable_web_page_preview: true, parse_mode: 'html', ...Markup.inlineKeyboard(buttons, { columns: 2 }).resize()});
      } catch(e){

      }
    } else {
      let status = '';
      if (json.s === 1) {
        status = 'üê® —Å–æ–≤–µ—Ç–Ω–∏–∫';
      } 
      // else if (json.s === 2) {
      //   status = 'üêº –ø–∞–Ω–¥–∞';
      // } else if (json.s === 3) {
      //   status = 'üê∫ –≤–æ–ª–∫';
      // } else if (json.s === 4) {
      //   status = 'üêØ —Ç–∏–≥—Ä';
      // } else if (json.s === 5) {
      //   status = 'ü¶Å –ª–µ–≤';
      // } else if (json.s === 6) {
      //   status = 'üêª –º–µ–¥–≤–µ–¥—å';
      // } else if (json.s === 7) {
      //   status = 'üê≤ –¥—Ä–∞–∫–æ–Ω';
      // }

      text += `–í—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${status}\n`;
      text += `–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${json.du} –º–µ—Å\n`;
      text += `–°—Ç–æ–∏–º–æ—Å—Ç—å: ${(PayForStatus * json.s * json.du * json.di).toFixed(4)} USDT\n`;
      text += `–°–∫–∏–¥–∫–∞: -${100 - json.di * 100}%\n\n`;

      text += '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏–ª—å–Ω–æ—Å—Ç—å: ';

      buttons.push(Markup.button.callback('–Ω–∞–∑–∞–¥', `buystatus ${JSON.stringify({})}`));

      buttons.push(Markup.button.callback(`${json.du === 1 ? '‚úÖ' : ''} 1 –º–µ—Å (-0%)`, `buystatus ${JSON.stringify({ ...json, du: 1, di: 1 })}`));
      buttons.push(Markup.button.callback(`${json.du === 3 ? '‚úÖ' : ''} 3 –º–µ—Å (-10%)`, `buystatus ${JSON.stringify({ ...json, du: 3, di: 0.9 })}`));
      buttons.push(Markup.button.callback(`${json.du === 6 ? '‚úÖ' : ''} 6 –º–µ—Å (-20%)`, `buystatus ${JSON.stringify({ ...json, du: 6, di: 0.8 })}`));
      buttons.push(Markup.button.callback(`${json.du === 9 ? '‚úÖ' : ''} 9 –º–µ—Å (-30%)`, `buystatus ${JSON.stringify({ ...json, du: 9, di: 0.7 })}`));
      buttons.push(Markup.button.callback(`${json.du === 12 ? '‚úÖ' : ''} 12 –º–µ—Å (-50%)`, `buystatus ${JSON.stringify({ ...json, du: 12, di: 0.5 })}`));
      buttons.push(Markup.button.callback('–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å', `buystatusact ${JSON.stringify({ ...json })}`));

      // await ctx.reply(text, Markup.inlineKeyboard(buttons, { columns: 2 }).resize());
      try {
        await ctx.editMessageText(text, {parse_mode: 'html', ...Markup.inlineKeyboard(buttons, { columns: 2 }).resize()});
      } catch (e) {
        console.log('e', e);
      }
    }
    // await buyStatus(bot, user, json);
  });

  bot.command('wallet', async (ctx) => {
    const user = await getUser(bot.instanceName, ctx.update.message.from.id);
    if (user)
      await printWallet(bot, user);
  });


  bot.command('restart_all', async (ctx) => {
    const user = await getUser(bot.instanceName, ctx.update.message.from.id);

    const isAdminUser = isAdmin(bot, user.id);

    const text = ctx.update.message.text;
    const entities = ctx.update.message.entities;
    const to_send = '–í–Ω–∏–º–∞–Ω–∏–µ! –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–≤–µ—Ç–æ–≤ –≤ —Å–ª–æ–∂–Ω—ã—Ö –∂–∏–∑–Ω–µ–Ω–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ü–æ–º–æ—â–Ω–∏–∫–∞ –∫–æ–º–∞–Ω–¥–æ–π /start';

    if (isAdminUser) {
      const count = await sendMessageToAll(bot, { text: to_send });
      await ctx.replyWithHTML(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${count} –ø–∞—Ä—Ç–Ω—ë—Ä–∞–º`);
    } else {
      await ctx.replyWithHTML('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤');
    }
  });

  bot.hears('üè´ –û–± –ò–Ω—Å—Ç–∏—Ç—É—Ç–µ', async (ctx) => {
    await getUser(bot.instanceName, ctx.update.message.from.id);
    await checkForExistBCAccount(bot, ctx);

    ctx.reply('–ì–ª–∞–≤–Ω—ã–π –í—Ö–æ–¥: https://intellect.run');
  });

  bot.hears('ü™ô –∫–æ—à–µ–ª—ë–∫', async (ctx) => {
    const user = await getUser(bot.instanceName, ctx.update.message.from.id);
    if (ctx.update.message.chat.type === 'private') {
      await printWallet(bot, user);
    }
  });

  bot.hears('üÜï c–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å', async (ctx) => {
    const user = await getUser(bot.instanceName, ctx.update.message.from.id);

    await addRequestAction(bot, user, ctx);
  });

  bot.hears('üèÅ –∑–∞–∫—Ä—ã—Ç—å –∑–∞–ø—Ä–æ—Å', async (ctx) => {
    const user = await getUser(bot.instanceName, ctx.update.message.from.id);

    await closeRequest(bot.instanceName, user.request_channel_id);

    user.state = null;
    user.request_chat_id = false;
    user.requests_count -= 1;

    await saveUser(bot.instanceName, user);
    let menu;

    if (user.requests_count > 0) {
      menu = Markup.keyboard(['üÜï c–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å'], { columns: 1 }).resize();
      await ctx.reply(`–í–∞—à –∑–∞–ø—Ä–æ—Å –∑–∞–∫—Ä—ã—Ç. –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤–µ—Ç–æ–≤: ${user.requests_count}.\n\n–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å–æ–≤–µ—Ç–æ–≤ —Å—Ç–∞–Ω—å—Ç–µ –ø–∞–π—â–∏–∫–æ–º –¶–∏—Ñ—Ä–æ–≤–æ–≥–æ –ö–æ–æ–ø–µ—Ä–∞—Ç–∏–≤–∞: @digital_earth_bot`, menu);
    } else {
      const clearMenu = Markup.removeKeyboard();
      await ctx.reply('–í–∞—à –∑–∞–ø—Ä–æ—Å –∑–∞–∫—Ä—ã—Ç.', clearMenu, { reply_markup: { remove_keyboard: true } });
      const buttons = [];
      buttons.push(Markup.button.callback('üîÑ –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã', `buystatus ${json.stringify({})}`));

      await ctx.reply('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—Å –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤–µ—Ç–æ–≤. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–≤–µ—Ç–æ–≤ —Å—Ç–∞–Ω—å—Ç–µ –ø–∞–π—â–∏–∫–æ–º —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∫–æ–æ–ø–µ—Ä–∞—Ç–∏–≤–∞: @digital_earth_bot –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã".', Markup.inlineKeyboard(buttons, { columns: 1 }).resize());
    }
  });

  bot.on('message', async (ctx) => {
    let user = await getUser(bot.instanceName, ctx.update.message.from.id);
    // console.log('catch user', user);
    console.log("message: ", ctx.update.message)
    if (user && user.id != 777000) {
      if (ctx.update.message.chat.type !== 'private') { // CATCH MESSAGE ON ANY PUBLIC CHAT WHERE BOT IS ADMIN
        const { text } = ctx.update.message;

        // console.log('tyL: ', ctx.update.message.reply_to_message);

        if (ctx.update.message.reply_to_message) { // –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —á—å–µ-—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
          const msg = await getMessage(bot.instanceName, ctx.update.message.reply_to_message.forward_from_message_id || ctx.update.message.reply_to_message.message_id, bot.getEnv().CV_CHANNEL);

          if (msg && msg.message_id) {
            // console.log('resend back to: ', msg);
            let id

            if (ctx.update.message.photo || ctx.update.message.caption) { id = await sendMessageToUser(bot, { id: msg.id }, ctx.update.message, { caption: ctx.update.message.caption }); } else { id = await sendMessageToUser(bot, { id: msg.id }, { text }); }

            // const id = await sendMessageToUser(bot, { id: msg.id }, { text });

            await insertMessage(bot.instanceName, user, user.id, text, 'question', id);
          }
        } else {
          await insertMessage(bot.instanceName, user, 'user', text);
        }
      } else { // –ï—Å–ª–∏ —ç—Ç–æ –¥–∏–∞–ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –±–æ—Ç–æ–º
        // –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∫–≤–∏–∑ –ª–∏
        const { text } = ctx.update.message;

        if (user.state) {
          // SEND FROM USER IN BOT TO PUB CHANNEL
          // console.log("\n\non here2")
          if (user.state === 'newrequest') {
            // console.log("HERE 1")
            await catchRequest(bot, user, ctx, text);
          } else if (user.state === 'chat') {
            // console.log("user: ", user)
            console.log('try to send: ', bot.getEnv().CHAT_CHANNEL, 'reply_to: ', user.request_chat_id);

            // const id = await sendMessageToUser(bot, { id: bot.getEnv().CHAT_CHANNEL }, { text }, { reply_to_message_id: user.request_chat_id });

            let id
            console.log(ctx.update.message)
            console.log("SEND!")
            if (ctx.update.message.photo || ctx.update.message.caption) { 
              id = await sendMessageToUser(bot, { id:  bot.getEnv().CHAT_CHANNEL }, ctx.update.message, { caption: ctx.update.message.caption, reply_to_message_id: user.request_chat_id });
            } else { 
              id = await sendMessageToUser(bot, { id:  bot.getEnv().CHAT_CHANNEL }, { text }, {reply_to_message_id: user.request_chat_id}); 
            }


            await insertMessage(bot.instanceName, user, bot.getEnv().CHAT_CHANNEL, text, id, 'chat');

            await saveUser(bot.instanceName, user);
            // //TODO AI
            
            // try{
            //   let response = await getAIAnswer(bot, text)
            //   console.log("AI RESPONCE: ", response.status, response.statusText)
            //   if (response.status == 200){
            //     await ctx.reply(response.data.choices[0].text)
            //   } else {

            //     await ctx.reply(`–û—à–∏–±–∫–∞ 1: `, response.statusText)  
            //   }
            // } catch(e){
              
            //   await ctx.reply(`–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∫–æ—Ä–æ—á–µ.`)  
            // }
            

          } else {
            // console.log("HERE 3")
            const request = Markup.keyboard(['üÜï c–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å'], { columns: 1 }).resize();

            await ctx.reply('–û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–ª—É—á–∏—Ç–µ —Ä–∞–∑—É–º–Ω—ã–π –æ—Ç–≤–µ—Ç:', request);

            const buttons = [];
            buttons.push(Markup.button.callback('üÜï c–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å', 'createrequest'));

            buttons.push(Markup.button.url('üè´ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ', 'https://intellect.run'));

            // await ctx.reply('\n\n–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:\n-–ú–æ–π –±–∏–∑–Ω–µ—Å —Å—Ç–∞–ª —É–±—ã—Ç–æ—á–µ–Ω, –∫–∞–∫ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ –∏ —É–ª—É—á—à–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏?.\n-–Ø –∑–∞—Å—Ç—Ä—è–ª –≤ —Ä–∞–∑–≤–∏—Ç–∏–∏ –∏ –Ω–∞—Ö–æ–∂—É—Å—å –≤ —É—Å–ª–æ–≤–∏—è—Ö –∂–∏–∑–Ω–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–µ–Ω—è –Ω–µ —É—Å—Ç—Ä–∞–∏–≤–∞—é—Ç. –ß—Ç–æ –¥–µ–ª–∞—Ç—å?\n\n–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –ò–Ω—Å—Ç–∏—Ç—É—Ç —Å–æ–±–µ—Ä—ë—Ç –°–æ–≤–µ—Ç –∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç –≤–∞—Å –∫ —É—á–∞—Å—Ç–∏—é –≤ –Ω—ë–º. ', Markup.inlineKeyboard(buttons, { columns: 2 }).resize());
          }
        } else {
          await insertMessage(bot.instanceName, user, 'user', text);
        }
      }
    } else {
      if (ctx.update.message && ctx.update.message.is_automatic_forward === true && ctx.update.message.sender_chat) {
        if (ctx.update.message.sender_chat.id == bot.getEnv().CV_CHANNEL) { // –µ—Å–ª–∏ —Å–ª–æ–≤–∏–ª–∏ –ø–µ—Ä–µ—Å—ã–ª–∫—É –∏–∑ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
          if (ctx.update.message.forward_from_chat.id == bot.getEnv().CV_CHANNEL) { // —Ç–æ –Ω—É–∂–Ω–æ –∑–∞–ø–æ–º–Ω–∏—Ç—å ID —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–± –æ—Ç–≤–µ—á–∞—Ç—å –≤ —Ç–æ–º –∂–µ —Ç—Ä–µ–¥–µ
            user = await getUserByResumeChannelId(bot.instanceName, ctx.update.message.forward_from_message_id);
            console.log('before catch: ', user);

            if (user && !user.request_chat_id) {
              console.log('catch forwarded messsage to chat: ', ctx.update.message.message_id);
              user.request_chat_id = ctx.update.message.message_id;
              await saveUser(bot.instanceName, user);
            }
          }
        }
      } else {
        if (ctx.update.message.chat.type === 'private') { // –ï—Å–ª–∏ –Ω–∞–¥–æ –æ–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏
          const request = Markup.keyboard(['üÜï c–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å'], { columns: 1 }).resize();

          const buttons = [];
          buttons.push(Markup.button.callback('üÜï c–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å', 'createrequest'));

          await ctx.reply('–ú–µ–Ω—è –∑–æ–≤—É—Ç –ö–Ω–æ, —è –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ üßôüèª‚Äç‚ôÇÔ∏è', request);
          await ctx.reply('–ú–æ–π –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –ø–æ–º–æ–≥–∞–µ—Ç –ø—Ä–∏–Ω—è—Ç—å —Ä–µ—à–µ–Ω–∏–µ –≤ –ª—é–±–æ–π –∂–∏–∑–Ω–µ–Ω–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ! –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∂–∏–∑–Ω–µ–Ω–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é, —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–æ–ø—Ä–æ—Å, –∏ –ø–æ–ª—É—á–∏—Ç–µ —Ä–∞–∑—É–º–Ω—ã–π –æ—Ç–≤–µ—Ç.', Markup.inlineKeyboard(buttons, { columns: 1 }).resize());

          // await ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!', request);
          // await ctx.reply('–ö–æ–ª–ª–µ–∫—Ç–∏–≤–Ω—ã–π –†–∞–∑—É–º –∏—â–µ—Ç –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã –ª—é–¥–µ–π –ª—é–±–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ! –û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ –≤–∞—à–µ–π –∑–∞–¥–∞—á–∏ —Ä–∞–∑–≤–∏—Ç–∏—è –∏ –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç:', Markup.inlineKeyboard(buttons, { columns: 1 }).resize());

          // buttons.push(Markup.button.url('üè´ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ', 'https://intellect.run'));
        }
        // ?
      }
    }
  });



  // bot.action('buystatus ', async (ctx) => {
  //   const user = await getUser(bot.instanceName, ctx.update.callback_query.from.id);
  //   await buyTicket(bot, user, ctx, 'USDT.TRC20');
  //   // await addRequestAction(bot, user, ctx);
  // });



  bot.action(/buystatusact (.+)?/gi, async (ctx) => {
    const user = await getUser(bot.instanceName, ctx.update.callback_query.from.id);

    const json = JSON.parse(ctx.match[1]);

    const number = parseInt(json.s);

    const statuses = getStatusByNumber(json.s);
    console.log(statuses);
    const cost = (PayForStatus * json.s * json.du * json.di).toFixed(4);

    let text = '';
    
    const buttons = [];

    text += `–í—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${statuses.status2}\n`;
    text += `–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${json.du} –º–µ—Å\n\n`;

    text += `–°—Ç–æ–∏–º–æ—Å—Ç—å: ${cost} USDT\n`;

    text += `–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã:`
    buttons.push(Markup.button.callback('USDT', `buystatusaction ${JSON.stringify({ status: statuses.status, cost })}`));
    buttons.push(Markup.button.callback('Visa, Mastercard', `buystatuswithcash`));
    buttons.push(Markup.button.callback('–û—Ç–º–µ–Ω–∞', `buystatus ${JSON.stringify({ ...json })}`));

    await ctx.editMessageText(text, Markup.inlineKeyboard(buttons, { columns: 2 }).resize());

    // await buyStatus(bot, user, json);
  });

  bot.action("buystatuswithcash", async (ctx) => {
    await ctx.reply('–û–ø–ª–∞—Ç–∞ —Å –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –∫–∞—Ä—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.')
  });
  

  bot.action(/buystatusaction (.+)?/gi, async (ctx) => {
    const user = await getUser(bot.instanceName, ctx.update.callback_query.from.id);

    const json = JSON.parse(ctx.match[1]);
    json.cost += ' FLOWER';

    const myBalance = await getLiquidBalance(bot, user.eosname, 'FLOWER');

    try {
      await buyTicket(bot, user, ctx, 'USDT.TRC20', json);
    } catch (e) {
      await ctx.reply(`–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞: ${e.message}`);
    }

  });


  bot.action('createrequest', async (ctx) => {
    const user = await getUser(bot.instanceName, ctx.update.callback_query.from.id);
    await addRequestAction(bot, user, ctx);
  });

  bot.action('mypartners', async (ctx) => {
    const user = await getUser(bot.instanceName, ctx.update.callback_query.from.id);
    await printPartners(bot, user);
  });

  return null;
};
